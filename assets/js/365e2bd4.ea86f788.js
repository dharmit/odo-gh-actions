"use strict";(self.webpackChunkodo_dev=self.webpackChunkodo_dev||[]).push([[67],{9662:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"odo-v3-beta2-release","metadata":{"permalink":"/odo-gh-actions/blog/odo-v3-beta2-release","editUrl":"https://github.com/redhat-developer/odo/edit/main/docs/website/blog/2022-07-21-odo-v3-beta2.md","source":"@site/blog/2022-07-21-odo-v3-beta2.md","title":"odo v3.0.0-beta2 Released","description":"3.0.0-beta2 of odo has been released!","date":"2022-07-21T00:00:00.000Z","formattedDate":"July 21, 2022","tags":[{"label":"release","permalink":"/odo-gh-actions/blog/tags/release"}],"readingTime":2.53,"truncated":true,"authors":[{"name":"Armel Soro","url":"https://github.com/rm3l","imageURL":"https://github.com/rm3l.png"}],"frontMatter":{"title":"odo v3.0.0-beta2 Released","author":"Armel Soro","author_url":"https://github.com/rm3l","author_image_url":"https://github.com/rm3l.png","tags":["release"],"slug":"odo-v3-beta2-release"},"nextItem":{"title":"odo v3.0.0-beta1 Released","permalink":"/odo-gh-actions/blog/odo-v3-beta1-release"}},"content":"`3.0.0-beta2` of odo has been released!\\n\\n\x3c!--truncate--\x3e\\n\\nTo install `odo`, follow our installation guide at [odo.dev](../docs/overview/installation)\\n\\n## Notable Changes\\n\\nCheck this Playlist for an overview of the most notable changes in this release:\\nhttps://www.youtube.com/playlist?list=PLGMB2PY4SNOoxZNN5Ye1mHC4kndPx3p6h\\n\\n### Features\\n\\n#### odo completion support ([#5856](https://github.com/redhat-developer/odo/pull/5856), [#5921](https://github.com/redhat-developer/odo/pull/5921))\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/cnxycd81wh0\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n\\n#### Executing alternative \'build\' and \'run\' commands with \'odo dev\' ([#5878](https://github.com/redhat-developer/odo/pull/5878), [#5891](https://github.com/redhat-developer/odo/pull/5891))\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/1qjceo414cA\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n\\n#### Setting naming strategy when running \'odo add binding\' ([#5912](https://github.com/redhat-developer/odo/pull/5912))\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/jvCUSO6uXfI\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n\\n#### `odo dev`: handle port forwarding after pod restart ([#5885](https://github.com/redhat-developer/odo/pull/5885))\\n\\n`odo dev` is now able to automatically handle port forwarding (and regenerate them if needed) after a pod restarts, \\ne.g., following a change in the Devfile that modifies the container component configuration while the dev session is running.\\n\\n### Bug fixes\\n- Error for `odo add binding` is misleading when no supported operator is installed ([#5887](https://github.com/redhat-developer/odo/pull/5887))\\n\\n### odo.dev\\n- Blog post on how to connect to a service without using the Service Binding Operator ([link](./binding-database-service-without-sbo/))\\n\\n## Detailed Changelog\\n\\nAs with every release, you can find the full list of changes and bug fixes on the [GitHub release page](https://github.com/redhat-developer/odo/releases/tag/v3.0.0-beta2)\\n\\n**Features/Enhancements:**\\n\\n- Allow setting `namingStrategy` when using `odo add binding` [\\\\#5912](https://github.com/redhat-developer/odo/pull/5912) ([rm3l](https://github.com/rm3l))\\n- `odo dev`: handle port forwarding after pod restart [\\\\#5885](https://github.com/redhat-developer/odo/pull/5885) ([feloy](https://github.com/feloy))\\n\\n**Documentation:**\\n\\n- Add documentation for `odo completion` [\\\\#5921](https://github.com/redhat-developer/odo/pull/5921) ([cdrage](https://github.com/cdrage))\\n- Bump odo version in installation docs [\\\\#5919](https://github.com/redhat-developer/odo/pull/5919) ([valaparthvi](https://github.com/valaparthvi))\\n- Blog: Connecting to a service without SBO [\\\\#5915](https://github.com/redhat-developer/odo/pull/5915) ([valaparthvi](https://github.com/valaparthvi))\\n- Add instruction to install odo via Maven plugin [\\\\#5909](https://github.com/redhat-developer/odo/pull/5909) ([mcarlett](https://github.com/mcarlett))\\n- adding Threat Model and corresponding md file [\\\\#5902](https://github.com/redhat-developer/odo/pull/5902) ([rnapoles-rh](https://github.com/rnapoles-rh))\\n\\n**Testing/CI:**\\n\\n- Sbo nightly test [\\\\#5946](https://github.com/redhat-developer/odo/pull/5946) ([anandrkskd](https://github.com/anandrkskd))\\n- Cleanup test to skip setup cluster steps if needed [\\\\#5945](https://github.com/redhat-developer/odo/pull/5945) ([anandrkskd](https://github.com/anandrkskd))\\n- Migrate to Ginkgo v2  [\\\\#5809](https://github.com/redhat-developer/odo/pull/5809) ([anandrkskd](https://github.com/anandrkskd))\\n\\n**Merged pull requests:**\\n\\n- Bump version to `v3.0.0-beta2` [\\\\#5952](https://github.com/redhat-developer/odo/pull/5952) ([rm3l](https://github.com/rm3l))\\n- Remove unused functions: `ComponentExist`, `PushedComponent` [\\\\#5944](https://github.com/redhat-developer/odo/pull/5944) ([valaparthvi](https://github.com/valaparthvi))\\n- download `golangci-lint` binary with test script [\\\\#5934](https://github.com/redhat-developer/odo/pull/5934) ([anandrkskd](https://github.com/anandrkskd))\\n- reduce test make targets, organize test file structure [\\\\#5931](https://github.com/redhat-developer/odo/pull/5931) ([anandrkskd](https://github.com/anandrkskd))\\n- Go: Bump `github.com/fatih/color` from `1.12.0` to `1.13.0` [\\\\#5925](https://github.com/redhat-developer/odo/pull/5925) ([dependabot[bot]](https://github.com/apps/dependabot))\\n- Go: Bump `github.com/posener/complete` from `1.1.1` to `1.2.3` [\\\\#5924](https://github.com/redhat-developer/odo/pull/5924) ([dependabot[bot]](https://github.com/apps/dependabot))\\n- Cleanup Adapter structure to not be used to pass parameters [\\\\#5918](https://github.com/redhat-developer/odo/pull/5918) ([feloy](https://github.com/feloy))\\n- Website: Bump `@tsconfig/docusaurus` from `1.0.4` to `1.0.6` in `/docs/website` [\\\\#5917](https://github.com/redhat-developer/odo/pull/5917) ([dependabot[bot]](https://github.com/apps/dependabot))\\n- Simplify `pkg/devfile/adapters/...` packages [\\\\#5914](https://github.com/redhat-developer/odo/pull/5914) ([feloy](https://github.com/feloy))\\n- Website: Bump `@svgr/webpack` from `5.5.0` to `6.2.1` in `/docs/website` [\\\\#5913](https://github.com/redhat-developer/odo/pull/5913) ([dependabot[bot]](https://github.com/apps/dependabot))\\n- Website: Bump `prism-react-renderer` from `1.3.1` to `1.3.5` in `/docs/website` [\\\\#5911](https://github.com/redhat-developer/odo/pull/5911) ([dependabot[bot]](https://github.com/apps/dependabot))\\n- Website: Bump `glob-parent` from `5.1.2` to `6.0.2` in `/docs/website` [\\\\#5910](https://github.com/redhat-developer/odo/pull/5910) ([dependabot[bot]](https://github.com/apps/dependabot))\\n- Use cached discovery client [\\\\#5908](https://github.com/redhat-developer/odo/pull/5908) ([dharmit](https://github.com/dharmit))\\n- Go: Bump `github.com/pborman/uuid` from `1.2.0` to `1.2.1` [\\\\#5901](https://github.com/redhat-developer/odo/pull/5901) ([dependabot[bot]](https://github.com/apps/dependabot))\\n- Website: Bump `browserslist` from `4.19.3` to `4.21.1` in `/docs/website` [\\\\#5897](https://github.com/redhat-developer/odo/pull/5897) ([dependabot[bot]](https://github.com/apps/dependabot))\\n- Website: Bump `@docusaurus/core` from `2.0.0-beta.16` to `2.0.0-beta.21` in `/docs/website` [\\\\#5895](https://github.com/redhat-developer/odo/pull/5895) ([dependabot[bot]](https://github.com/apps/dependabot))\\n- Add assertions for types implementing interfaces [\\\\#5893](https://github.com/redhat-developer/odo/pull/5893) ([feloy](https://github.com/feloy))\\n- update documentation issue template [\\\\#5859](https://github.com/redhat-developer/odo/pull/5859) ([kadel](https://github.com/kadel))\\n- Fixes terminal completion command for odo [\\\\#5856](https://github.com/redhat-developer/odo/pull/5856) ([cdrage](https://github.com/cdrage))"},{"id":"odo-v3-beta1-release","metadata":{"permalink":"/odo-gh-actions/blog/odo-v3-beta1-release","editUrl":"https://github.com/redhat-developer/odo/edit/main/docs/website/blog/2022-07-01-odo-v3-beta1.md","source":"@site/blog/2022-07-01-odo-v3-beta1.md","title":"odo v3.0.0-beta1 Released","description":"3.0.0-beta1 of odo has been released!","date":"2022-07-01T00:00:00.000Z","formattedDate":"July 1, 2022","tags":[{"label":"release","permalink":"/odo-gh-actions/blog/tags/release"}],"readingTime":4,"truncated":true,"authors":[{"name":"Armel Soro","url":"https://github.com/rm3l","imageURL":"https://github.com/rm3l.png"}],"frontMatter":{"title":"odo v3.0.0-beta1 Released","author":"Armel Soro","author_url":"https://github.com/rm3l","author_image_url":"https://github.com/rm3l.png","tags":["release"],"slug":"odo-v3-beta1-release"},"prevItem":{"title":"odo v3.0.0-beta2 Released","permalink":"/odo-gh-actions/blog/odo-v3-beta2-release"},"nextItem":{"title":"Binding to a database service without the Service Binding Operator","permalink":"/odo-gh-actions/blog/binding-database-service-without-sbo"}},"content":"`3.0.0-beta1` of odo has been released!\\n\\n\x3c!--truncate--\x3e\\n\\n## Notable Changes\\n\\n### Features\\n\\nCheck this Playlist for an overview of the most notable changes in this release:\\nhttps://www.youtube.com/watch?v=yTUk_rx3aP8&list=PLGMB2PY4SNOrBQabcLZ_M5rN8l5u0B_cw\\n\\n#### Ability to show (and stream) logs of running component, with `odo logs` and `odo logs \u2013follow` ([#5622](https://github.com/redhat-developer/odo/issues/5622), [#5715](https://github.com/redhat-developer/odo/issues/5715))\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/BjmUPUVupG0\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n\\n#### Substituting variables into the Devfile from the CLI when running `odo dev` or `odo deploy` ([#5489](https://github.com/redhat-developer/odo/issues/5489))\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/yTUk_rx3aP8\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n\\n#### Support for composite run and debug Devfile commands when running `odo dev` ([#5054](https://github.com/redhat-developer/odo/issues/5054))\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/IK2lrDUGOMk\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n\\n#### Ability to list existing Service Bindings and interactively generate Service Binding from a directory with no Devfile ([#5635](https://github.com/redhat-developer/odo/issues/5635), [#5772](https://github.com/redhat-developer/odo/issues/5772))\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/xJVRMCBPV44\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n\\n#### \u201cBind as files\u201d UI update when running `odo add binding` ([#5770](https://github.com/redhat-developer/odo/issues/5770))\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/7ZVjoLR8H0k\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe> \\n\\n#### Ability to unbind ServiceBindings from the Devfile, with `odo remove binding` ([#5693](https://github.com/redhat-developer/odo/issues/5693))\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/oWMwcF-oQtE\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n\\n### Bug fixes\\n- Better support for command and args fields in Devfile container components: odo no longer overrides the container command with Supervisord ([#5648](https://github.com/redhat-developer/odo/issues/5648))\\n- Devfile Volume components shown when personalizing Devfile configuration via `odo init` ([#5779](https://github.com/redhat-developer/odo/issues/5779))\\n\\n### odo.dev\\n- Main site switched to 3.0.0 documentation\\n- Blog post about binding an external service with odo v3 ([link](https://odo.dev/blog/binding-database-service-without-sbo))\\n- Homebrew installation details ([#5801](https://github.com/redhat-developer/odo/issues/5801))\\n\\n\\n## Detailed Changelog\\n\\nAs with every release, you can find the full list of changes and bug fixes on the [GitHub release page](https://github.com/redhat-developer/odo/releases/tag/v3.0.0-beta1)\\n\\n### Features/Enhancements\\n\\n* `odo remove binding` by [@valaparthvi](https://github.com/valaparthvi) in https://github.com/redhat-developer/odo/pull/5787\\n* Add `odo logs` by [@dharmit](https://github.com/dharmit) in https://github.com/redhat-developer/odo/pull/5760\\n* Substituting variables into the devfile from the CLI by [@feloy](https://github.com/feloy) in https://github.com/redhat-developer/odo/pull/5749\\n* Add support for `command`/`args` fields in `container` components by [@rm3l](https://github.com/rm3l) in https://github.com/redhat-developer/odo/pull/5768\\n* Add `odo logs` for Deploy mode by [@dharmit](https://github.com/dharmit) in https://github.com/redhat-developer/odo/pull/5825\\n* `odo list binding` by [@feloy](https://github.com/feloy) in https://github.com/redhat-developer/odo/pull/5823\\n* Remove `odo preference registry update` command by [@valaparthvi](https://github.com/valaparthvi) in https://github.com/redhat-developer/odo/pull/5853\\n* Preference cleanup (1/n) by [@valaparthvi](https://github.com/valaparthvi) in https://github.com/redhat-developer/odo/pull/5822\\n* `odo add binding` without devfile.yaml by [@feloy](https://github.com/feloy) in https://github.com/redhat-developer/odo/pull/5858\\n* Adds support to follow/tail/stream odo logs by [@dharmit](https://github.com/dharmit) in https://github.com/redhat-developer/odo/pull/5846\\n* Change ephemeral default to `false` by [@kadel](https://github.com/kadel) in https://github.com/redhat-developer/odo/pull/5795\\n* Add support for composite run/debug commands by [@rm3l](https://github.com/rm3l) in https://github.com/redhat-developer/odo/pull/5841\\n* Update `odo preference view` to show list of devfile registries by [@valaparthvi](https://github.com/valaparthvi) in https://github.com/redhat-developer/odo/pull/5850\\n* Add `odo preference add` and `odo preference remove` commands by [@valaparthvi](https://github.com/valaparthvi) in https://github.com/redhat-developer/odo/pull/5873\\n* Add `run-command` flag to `odo dev` to run non-default Run command by [@rm3l](https://github.com/rm3l) in https://github.com/redhat-developer/odo/pull/5878\\n* Add `build-command` flag to `odo dev` to run non-default Build command by [@rm3l](https://github.com/rm3l) in https://github.com/redhat-developer/odo/pull/5891\\n\\n### Bugs\\n\\n* Use latest alizer library version, including .NET detection by [@feloy](https://github.com/feloy) in https://github.com/redhat-developer/odo/pull/5804\\n* Ignore dynamic resource when not found by [@vinny-sabatini](https://github.com/vinny-sabatini) in https://github.com/redhat-developer/odo/pull/5815\\n* Fix: configuration shows volumes as containers by [@valaparthvi](https://github.com/valaparthvi) in https://github.com/redhat-developer/odo/pull/5807\\n* Wait for deployment rollout only when binding created / modified by [@feloy](https://github.com/feloy) in https://github.com/redhat-developer/odo/pull/5785\\n* `odo add binding` - Bind as files UI update by [@valaparthvi](https://github.com/valaparthvi) in https://github.com/redhat-developer/odo/pull/5817\\n* Typing `odo foobar --help` should error out with invalid command by [@cdrage](https://github.com/cdrage) in https://github.com/redhat-developer/odo/pull/5813\\n* Fix misleading `add binding` error message by [@valaparthvi](https://github.com/valaparthvi) in https://github.com/redhat-developer/odo/pull/5887\\n\\n### Documentation\\n\\n* update links to v3 binary by [@anandrkskd](https://github.com/anandrkskd) in https://github.com/redhat-developer/odo/pull/5805\\n* Add 3.0.0 link to homepage, and fix alpha title by [@cdrage](https://github.com/cdrage) in https://github.com/redhat-developer/odo/pull/5810\\n* Update README.md by [@kadel](https://github.com/kadel) in https://github.com/redhat-developer/odo/pull/5835\\n* Add Homebrew installation details by [@cdrage](https://github.com/cdrage) in https://github.com/redhat-developer/odo/pull/5812\\n* Add blog post about binding an external service by [@feloy](https://github.com/feloy) in https://github.com/redhat-developer/odo/pull/5828\\n* Fix CLI info regarding Springboot quickstart by [@cdrage](https://github.com/cdrage) in https://github.com/redhat-developer/odo/pull/5849\\n* Add DCO documentation by [@fbricon](https://github.com/fbricon) in https://github.com/redhat-developer/odo/pull/5864\\n* Add missing documentation on SBO installation by [@valaparthvi](https://github.com/valaparthvi) in https://github.com/redhat-developer/odo/pull/5855\\n* Make 3.0.0 the default on the site by [@cdrage](https://github.com/cdrage) in https://github.com/redhat-developer/odo/pull/5857\\n* Remove \\"unmaintained\\" banner for 2.5.0 by [@cdrage](https://github.com/cdrage) in https://github.com/redhat-developer/odo/pull/5884\\n\\n### Testing/CI\\n\\n* Add unit test for `odo add binding` by [@valaparthvi](https://github.com/valaparthvi) in https://github.com/redhat-developer/odo/pull/5790\\n* add e2e tests by [@anandrkskd](https://github.com/anandrkskd) in https://github.com/redhat-developer/odo/pull/5778\\n* Fix parametrized integration tests by [@valaparthvi](https://github.com/valaparthvi) in https://github.com/redhat-developer/odo/pull/5826\\n* Fix flaky `kubeexec` unit test case with env vars by [@rm3l](https://github.com/rm3l) in https://github.com/redhat-developer/odo/pull/5845\\n* Check if all Pods are running in `odo logs` tests by [@dharmit](https://github.com/dharmit) in https://github.com/redhat-developer/odo/pull/5851\\n* Install script for operators on Kubernetes + Activate tests with operatoes on Kubernetes by [@feloy](https://github.com/feloy) in https://github.com/redhat-developer/odo/pull/5861\\n* Eventually list namespaces for test by [@feloy](https://github.com/feloy) in https://github.com/redhat-developer/odo/pull/5837\\n* Enable Dependabot by [@rm3l](https://github.com/rm3l) in https://github.com/redhat-developer/odo/pull/5827\\n\\n### Other merged pull requests\\n\\n* Update OWNERS files by [@valaparthvi](https://github.com/valaparthvi) in https://github.com/redhat-developer/odo/pull/5808\\n* Bump to version v3.0.0-beta1 by [@feloy](https://github.com/feloy) in https://github.com/redhat-developer/odo/pull/5903"},{"id":"binding-database-service-without-sbo","metadata":{"permalink":"/odo-gh-actions/blog/binding-database-service-without-sbo","editUrl":"https://github.com/redhat-developer/odo/edit/main/docs/website/blog/2022-06-30-binding-database-service-without-sbo.md","source":"@site/blog/2022-06-30-binding-database-service-without-sbo.md","title":"Binding to a database service without the Service Binding Operator","description":"How to bind your application to a database service without the Service Binding Operator.","date":"2022-06-30T00:00:00.000Z","formattedDate":"June 30, 2022","tags":[{"label":"binding","permalink":"/odo-gh-actions/blog/tags/binding"}],"readingTime":7.165,"truncated":true,"authors":[{"name":"Parthvi Vala","url":"https://github.com/valaparthvi","imageURL":"https://github.com/valaparthvi.png"}],"frontMatter":{"title":"Binding to a database service without the Service Binding Operator","author":"Parthvi Vala","author_url":"https://github.com/valaparthvi","author_image_url":"https://github.com/valaparthvi.png","tags":["binding"],"slug":"binding-database-service-without-sbo"},"prevItem":{"title":"odo v3.0.0-beta1 Released","permalink":"/odo-gh-actions/blog/odo-v3-beta1-release"},"nextItem":{"title":"Binding an external service with odo v3","permalink":"/odo-gh-actions/blog/binding-external-service-with-odo-v3"}},"content":"How to bind your application to a database service without the Service Binding Operator.\\n\\n\x3c!--truncate--\x3e\\n\\nThere are a few ways of binding your application to a database service with the help of odo. The recommended way is with the help of Service Binding Operator(SBO), but it is also possible to bind without it, and this blog will show you how.\\n\\n\\n## Architecture\\nWe have a simple CRUD application built in Go that can create/list/update/delete a place. This application requires connecting to a MongoDB database in order to function correctly, which will be deployed as a microservice on the cluster.\\n\\n## Prerequisites:\\nThis blog assumes:\\n- [odo v3.0.0-beta1](https://github.com/redhat-developer/odo/releases/tag/v3.0.0-beta1)\\n- you have access to a Kubernetes or OpenShift cluster.\\n- you have _Helm_ installed on your system. See https://helm.sh/docs/intro/install/ for installation instructions.\\n\\n## (Optional) Setting up the namespace\\n0. We will create a new namespace to deploy our application in, with the help of odo.\\n```sh\\nodo create namespace restapi-mongodb\\n```\\n\\n## Setting up the MongoDB microservice\\nWe are going to use the Bitnami\'s helm charts for creating our MongoDB database.\\n\\n1. Add the Bitnami\'s Helm charts repository and make your Helm client up to date with it:\\n```sh\\nhelm repo add bitnami https://charts.bitnami.com/bitnami && helm repo update\\n```\\n\\n2. Declare the necessary environment variables:\\n```sh\\nMY_MONGODB_ROOT_USERNAME=root\\nMY_MONGODB_ROOT_PASSWORD=my-super-secret-root-password\\nMY_MONGODB_USERNAME=my-app-username\\nMY_MONGODB_PASSWORD=my-app-super-secret-password\\nMY_MONGODB_DATABASE=my-app\\n```\\nMake sure `MY_MONGODB_ROOT_USERNAME`, and `MY_MONGODB_ROOT_PASSWORD`  are declared/exported in any new terminal session from where you might run an odo command for this application.\\n\\n1. Create the MongoDB service.\\n```sh\\nhelm install mongodb bitnami/mongodb \\\\\\n  --set auth.rootPassword=$MY_MONGODB_ROOT_PASSWORD \\\\\\n  --set auth.username=$MY_MONGODB_USERNAME \\\\\\n  --set auth.password=$MY_MONGODB_PASSWORD \\\\\\n  --set auth.database=$MY_MONGODB_DATABASE\\n```\\n\\n<details>\\n<summary>Expected output:</summary>\\n\\n```sh\\n$ helm install mongodb bitnami/mongodb \\\\\\n  --set auth.rootPassword=$MY_MONGODB_ROOT_PASSWORD \\\\\\n  --set auth.username=$MY_MONGODB_USERNAME \\\\\\n  --set auth.password=$MY_MONGODB_PASSWORD \\\\\\n  --set auth.database=$MY_MONGODB_DATABASE\\nNAME: mongodb\\nLAST DEPLOYED: Tue Jul  5 15:53:40 2022\\nNAMESPACE: restapi-mongodb\\nSTATUS: deployed\\nREVISION: 1\\nTEST SUITE: None\\nNOTES:\\nCHART NAME: mongodb\\nCHART VERSION: 12.1.24\\nAPP VERSION: 5.0.9\\n\\n** Please be patient while the chart is being deployed **\\n\\nMongoDB&reg; can be accessed on the following DNS name(s) and ports from within your cluster:\\n\\n    mongodb.restapi-mongodb.svc.cluster.local\\n\\nTo get the root password run:\\n\\n    export MONGODB_ROOT_PASSWORD=$(kubectl get secret --namespace restapi-mongodb mongodb -o jsonpath=\\"{.data.mongodb-root-password}\\" | base64 -d)\\n\\nTo get the password for \\"my-app-username\\" run:\\n\\n    export MONGODB_PASSWORD=$(kubectl get secret --namespace restapi-mongodb mongodb -o jsonpath=\\"{.data.mongodb-passwords}\\" | base64 -d | awk -F\'\\n,\' \'{print $1}\')\\n\\nTo connect to your database, create a MongoDB&reg; client container:\\n\\n    kubectl run --namespace restapi-mongodb mongodb-client --rm --tty -i --restart=\'Never\' --env=\\"MONGODB_ROOT_PASSWORD=$MONGODB_ROOT_PASSWORD\\" --\\nimage docker.io/bitnami/mongodb:5.0.9-debian-11-r1 --command -- bash\\n\\nThen, run the following command:\\n    mongosh admin --host \\"mongodb\\" --authenticationDatabase admin -u root -p $MONGODB_ROOT_PASSWORD\\n\\nTo connect to your database from outside the cluster execute the following commands:\\n\\n    kubectl port-forward --namespace restapi-mongodb svc/mongodb 27017:27017 &\\n    mongosh --host 127.0.0.1 --authenticationDatabase admin -p $MONGODB_ROOT_PASSWORD\\n\\n```\\n</details>\\n\\nNotice the resources(sevice, deployment, and secrets) that are deployed.\\n\\nWait for the pods to come up, this might take a few minutes:\\n```sh\\n$ kubectl get pods\\nNAME                       READY   STATUS    RESTARTS   AGE\\nmongodb-85fff797f6-fnwvl   1/1     Running   0          63s\\n```\\n\\n## Setting up the application\\n4. Clone the repository, and cd into it.\\n```sh\\ngit clone https://github.com/valaparthvi/restapi-mongodb-odo.git && cd restapi-mongodb-odo\\n```\\n\\n\\n## Download the devfile.yaml\\n5. Run `odo init` to fetch the necessary devfile.\\n```sh\\nodo init --devfile go --name places\\n```\\n\\n<details>\\n<summary>Expected output:</summary>\\n\\n```sh\\n  __\\n /  \\\\__     Initializing new component\\n \\\\__/  \\\\    Files: Source code detected, a Devfile will be determined based upon source code autodetection\\n /  \\\\__/    odo version: v3.0.0-beta1\\n \\\\__/\\n\\nInteractive mode enabled, please answer the following questions:\\n \u2713  Downloading devfile \\"go\\" [4s]\\n\\nYour new component \'places\' is ready in the current directory.\\nTo start editing your component, use \'odo dev\' and open this folder in your favorite IDE.\\nChanges will be directly reflected on the cluster.\\n```\\n</details>\\n\\n<details>\\n<summary>If you run <code>odo dev</code> to deploy the application at this point, you will notice that the \'run\' command has failed with some logs, this is expected, because like we mentioned before, our Go application is dependent on the MongoDB service and will not function unless it is connected to it.</summary>\\n\\n```sh\\n$ odo dev\\n  __\\n /  \\\\__     Developing using the restapi Devfile\\n \\\\__/  \\\\    Namespace: restapi-mongodb\\n /  \\\\__/    odo version: v3.0.0-alpha3\\n \\\\__/\\n\\n\u21aa Deploying to the cluster in developer mode\\n \u2713  Waiting for Kubernetes resources [52s]\\n \u2713  Syncing files into the container [844ms]\\n \u2713  Building your application in container on cluster (command: build) [5s]\\n \u2022  Executing the application (command: run)  ...\\n \u2717  Executing the application (command: run) [188ms]\\n \u26a0  Devfile command \\"run\\" exited with an error status in 20 second(s)\\n \u26a0  Last 100 lines of log:\\ngo: downloading github.com/sirupsen/logrus v1.8.1\\n...\\n...\\n2022/07/06 10:52:10 No binding username found\\n - Forwarding from 127.0.0.1:40001 -> 8080\\n\\nYour application is now running on the cluster\\n\\nWatching for changes in the current directory /home/pvala/restapi-mongodb-odo\\nPress Ctrl+c to exit `odo dev` and delete resources from the cluster\\n\\n```\\n</details>\\n\\n\\n\\n## Adding the connection information to devfile.yaml\\nThere are a few changes that we will need to make to our devfile:\\n\\n6.1 Change the `schemaVersion` of devfile to 2.2.0.\\n```yaml\\nschemaVersion: 2.2.0\\n```\\nPlease note that this change is only necessary because we are using [devfile variable substitution](/docs/command-reference/dev#substituting-variables).\\n\\n6.2 Add a `variables` field in the devfile.\\n```yaml\\nvariables:\\n  PASSWORD: password\\n  USERNAME: user\\n  HOST: host\\n```\\n6.3 Edit the \'runtime\' container component in devfile to add information such as username, password, and host required to connect to the MongoDB service.\\n```yaml\\ncomponents:\\n- container:\\n    ...\\n    ...\\n    env:\\n    - name: username\\n      value: \\"{{USERNAME}}\\"\\n    - name: password\\n      value: \\"{{PASSWORD}}\\"\\n    - name: host\\n      value: \\"{{HOST}}\\"\\n  name: runtime\\n```\\n\\nThe values for _username_, _password_, and _host_ will be passed to devfile.yaml with the `--var` flag when we run the `odo dev` command.\\n\\n<details>\\n<summary>Your final devfile.yaml should look something like this:</summary>\\n\\n```yaml\\ncommands:\\n- exec:\\n    commandLine: GOCACHE=${PROJECT_SOURCE}/.cache go build main.go\\n    component: runtime\\n    group:\\n      isDefault: true\\n      kind: build\\n    hotReloadCapable: false\\n    workingDir: ${PROJECT_SOURCE}\\n  id: build\\n- exec:\\n    commandLine: ./main\\n    component: runtime\\n    group:\\n      isDefault: true\\n      kind: run\\n    hotReloadCapable: false\\n    workingDir: ${PROJECT_SOURCE}\\n  id: run\\ncomponents:\\n- container:\\n    dedicatedPod: false\\n    endpoints:\\n    - name: http\\n      targetPort: 8080\\n    image: golang:latest\\n    memoryLimit: 1024Mi\\n    mountSources: true\\n    env:\\n    - name: username\\n      value: \\"{{USERNAME}}\\"\\n    - name: password\\n      value: \\"{{PASSWORD}}\\"\\n    - name: host\\n      value: \\"{{HOST}}\\"\\n  name: runtime\\nvariables:\\n  PASSWORD: password\\n  USERNAME: user\\n  HOST: host\\nmetadata:\\n  description: Stack with the latest Go version\\n  displayName: Go Runtime\\n  icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/golang.svg\\n  language: go\\n  name: restapi\\n  projectType: go\\n  tags:\\n  - Go\\n  version: 1.0.0\\nschemaVersion: 2.2.0\\nstarterProjects:\\n- git:\\n    checkoutFrom:\\n      revision: main\\n    remotes:\\n      origin: https://github.com/devfile-samples/devfile-stack-go.git\\n  name: go-starter\\n```\\n</details>\\n\\n\\n## Deploy the application\\n7. Run `odo dev` to deploy the application on the cluster.\\n```sh\\nodo dev \\\\\\n  --var PASSWORD=$MY_MONGODB_ROOT_PASSWORD \\\\\\n  --var USERNAME=$MY_MONGODB_ROOT_USERNAME \\\\\\n  --var HOST=\\"mongodb\\"\\n```\\n\\nThe value for _host_ is name of the service that belongs to our database application, in this case it is a service resource called \\"mongodb\\", you might have noticed it when we deployed the helm chart.\\n\\n<details>\\n<summary>Expected output:</summary>\\n\\n```sh\\n$ odo dev --var PASSWORD=$MY_MONGODB_ROOT_PASSWORD --var USERNAME=$MY_MONGODB_ROOT_USERNAME --var HOST=\\"mongodb\\"\\n  __\\n /  \\\\__     Developing using the restapi Devfile\\n \\\\__/  \\\\    Namespace: restapi-mongodb\\n /  \\\\__/    odo version: v3.0.0-alpha3\\n \\\\__/\\n\\n\u21aa Deploying to the cluster in developer mode\\n \u2713  Waiting for Kubernetes resources [52s]\\n \u2713  Syncing files into the container [844ms]\\n \u2713  Building your application in container on cluster (command: build) [5s]\\n \u2022  Executing the application (command: run)  ...\\n\\nYour application is now running on the cluster\\n\\n - Forwarding from 127.0.0.1:40001 -> 8080\\n\\nWatching for changes in the current directory /home/pvala/restapi-mongodb-odo\\nPress Ctrl+c to exit `odo dev` and delete resources from the cluster\\n```\\n</details>\\n\\n\\n## Accessing the application\\n8. Run the following curl command to test the application:\\n```sh\\ncurl 127.0.0.1:40001/api/places\\n```\\nThis will return a _null_ response since the database is currently empty, but it also means that we have successfully connected to our database application.\\n\\n9. Add some data to the database:\\n```sh\\ncurl -sSL -XPOST -d \'{\\"title\\": \\"Agra\\", \\"description\\": \\"Land of Tajmahal\\"}\' 127.0.0.1:40001/api/places\\n```\\n\\n10. Fetch the list of places again:\\n```sh\\n$ curl 127.0.0.1:40001/api/places\\n\\n{\\"id\\":\\"62c2a0659fa147e382a4db31\\",\\"title\\":\\"Agra\\",\\"description\\":\\"Land of Tajmahal\\"}\\n```\\n\\n### List of available API endpoints\\n- GET `/api/places` - List all places\\n- POST `/api/places` - Add a new place\\n- PUT `/api/places` - Update a place\\n- GET `/api/places/<id>` - Fetch place with id `<id>`\\n- DELETE `/api/places/<id>` - Delete place with id `<id>`\\n\\n## Conclusion\\nTo conclude this blog, it is possible to connect your application with another microservice without the Service Binding Operator if you have the correct connection information. Using the Service Binding Operator with a [Bindable Operator](https://github.com/redhat-developer/service-binding-operator#known-bindable-operators) makes it easy for you to not care about finding the connection information and ease the binding.\\n\\n### Related articles on binding:\\n* [Binding an external service with odo v3](./2022-06-14-binding-external-service.md)\\n* [odo add binding](/docs/command-reference/add-binding)"},{"id":"binding-external-service-with-odo-v3","metadata":{"permalink":"/odo-gh-actions/blog/binding-external-service-with-odo-v3","editUrl":"https://github.com/redhat-developer/odo/edit/main/docs/website/blog/2022-06-14-binding-external-service.md","source":"@site/blog/2022-06-14-binding-external-service.md","title":"Binding an external service with odo v3","description":"How to bind an external service using odo v3","date":"2022-06-14T00:00:00.000Z","formattedDate":"June 14, 2022","tags":[{"label":"binding","permalink":"/odo-gh-actions/blog/tags/binding"}],"readingTime":6.36,"truncated":true,"authors":[{"name":"Philippe Martin","url":"https://github.com/feloy","imageURL":"https://github.com/feloy.png"}],"frontMatter":{"title":"Binding an external service with odo v3","author":"Philippe Martin","author_url":"https://github.com/feloy","author_image_url":"https://github.com/feloy.png","tags":["binding"],"slug":"binding-external-service-with-odo-v3"},"prevItem":{"title":"Binding to a database service without the Service Binding Operator","permalink":"/odo-gh-actions/blog/binding-database-service-without-sbo"},"nextItem":{"title":"odo v3-alpha1 Released","permalink":"/odo-gh-actions/blog/odo-v3-alpha1-release"}},"content":"How to bind an external service using odo v3\\n\\n\x3c!--truncate--\x3e\\n\\nWhen developers are working on a micro-service that needs to access a database or another service, \\nthey may want to provide to their application the address and the necessary credentials to access\\nthis service as simply as possible.\\n\\nIn this article, we are going to talk about *binding* the service to the application.\\n\\nUsing the Service Binding Operator and creating some Kubernetes resources for\\neach service you want to bind to, you can make the life easier for developers.\\n\\n## Creating a Service resource to redirect to the external service\\n\\nTo expose an external service from inside a Kubernetes cluster, you can create a *Headless* Service,\\nand manually create the Endpoints to access this external service.\\n\\nHere is an example, to connect to an external Redis service on IP 192.168.1.10 and port 6379:\\n\\n```yaml\\nkind: Service\\napiVersion: v1\\nmetadata:\\n  name: redis\\n  namespace: external-services\\nspec:\\n  type: ClusterIP\\n  ports:\\n  - port: 6379\\n    targetPort: 6379\\n\\n---\\n\\nkind: Endpoints\\napiVersion: v1\\nmetadata:\\n  name: redis\\n  namespace: external-services\\nsubsets:\\n- addresses:\\n  - ip: 192.168.1.10\\n  ports:\\n  - port: 6379\\n```\\n\\nNote that we have created these resources in a `external-services` namespace, which is a dedicated namespace\\nto store external services information, accessible by all developers.\\n\\nYou can find more information about creating Service resources to access external services [here](https://docs.openshift.com/dedicated/3/dev_guide/integrating_external_services.html) or [here](https://www.youtube.com/watch?v=fvpq4jqtuZ8).\\n\\n## Storing the credentials into a Secret resource\\n\\nThe Redis instance is protected by a password, and you may want to store this password into a Secret resource,\\nso it can be used by applications.\\n\\nThe developers may want to *mount* this Secret into their application\'s Pod, but Secrets are mountable only\\nfrom Pods in the same namespace, and you would like to share these credentials with all the developers \\nof the team, without creating several instances of this Secret (one in each developer\'s namespace), but only one\\nin the `external-services` namespace.\\n\\nHere is, as an example, the secret to store the Redis password.\\n\\n```yaml\\nkind: Secret\\napiVersion: v1\\nmetadata:\\n  name: redis-credentials\\n  namespace: external-services\\nstringData:\\n  password: MyEasyPassword\\n```\\n\\n## Adding SBO Annotations to the Service resource\\n\\nTo be able to *mount* the values of this secret from any namespace, you can use the *Service Binding Operator* (SBO for short), so each developer can define a ServiceBinding resource\\nbetween the service and its application, and get the values of the secret (and other values) mounted into its application\'s Pod.\\n\\nYou can find information about the Service Binding Operator [here](/docs/overview/cluster-setup/kubernetes).\\n\\nA ServiceBinding defines a binding between an *Application* and a *Service*. The credentials injected into the application\\ncan be defined in different ways:\\n- if the service is an Operator-backed service running on the cluster, the details of the injected credentials can be set\\nas annotations of the CRD associated with the Operator-backed service,\\n- in any case, the details of the injected credentials can be set in the resource itself (not the CRD). \\n- in any case, the details of the injected credentials can be set in the ServiceBinding resource itself.\\n\\nIn this article, we are not using an Operator-backed service, but an external service referenced by a Service resource.\\nAs the Service resource is a native Kubernetes resource, we cannot add annotations to its CRD, so we will add annotations to\\nthe Service resource itself.\\n\\nYou can modify the definition of the Service, by adding the following annotations:\\n\\n```yaml\\nkind: Service\\napiVersion: v1\\nmetadata:\\n  name: redis\\n  annotations:\\n    service.binding/host: path={.metadata.name}.{.metadata.namespace}.svc.cluster.local\\n    service.binding: path={.metadata.name}-credentials,objectType=Secret\\nspec:\\n  type: ClusterIP\\n  ports:\\n  - port: 6379\\n    targetPort: 6379\\n```\\n\\nIn this snippet, the first annotation\\n\\n```\\nservice.binding/host: path={.metadata.name}.{.metadata.namespace}.svc.cluster.local\\n```\\n\\nindicates to the SBO to inject a `host` variable into the application, with a value computed based on the\\n`metadata.name` and `metadata.namespace` of the Service resource. In this example, the value `redis.external-services.svc.cluster.local`\\nwill be given to the `host` variable.\\n\\n\\nThe second annotation\\n\\n```\\nservice.binding: path={.metadata.name}-credentials,objectType=Secret\\n```\\n\\nindicates to the SBO to inject the values defined in the Secret, whose name is the name of the Service resource\\nfollowed by `-credentials` (`redis-credentials` in our example), into the application. In this example, the variable `password` \\nwith a value `MyEasyPassword` will be injected into the application\'s Pod.\\n\\n## Adding a ServiceBinding to the Devfile\\n\\nTo define a ServiceBinding, we need information (group, version, kind, name, and namespace) about the Application and the Service.\\n\\nIn our example, the service is a Kubernetes Service (group \\"\\", version \\"v1\\" and kind \\"Service\\") named `redis`\\nin the `external-services` namespace.\\n\\nThe application will be the Deployment resource (group \\"apps\\", version \\"v1\\", kind \\"Deployment\\") created by odo when you run `odo dev`.\\nBy convention, the Deployment name will be the name of the Devfile (in the `.metadata.name` field) followed by `-app` (`my-nodejs-app-app` in our example).\\nYou don\'t have to specify the namespace, as the Deployment will be in the same namespace as the ServiceBinding.\\n\\nThe option `bindAsFiles` indicates to the SBO to create files into the Pod\'s container, each file having the name \\nof a credential, and containing the value of the credential.\\n\\n```yaml\\napiVersion: binding.operators.coreos.com/v1alpha1\\nkind: ServiceBinding\\nmetadata:\\n  name: binding-to-redis\\nspec:\\n  application:\\n    group: apps\\n    version: v1\\n    kind: Deployment\\n    name: my-nodejs-app-app\\n  services:\\n  - group: \\"\\"\\n    version: v1\\n    kind: Service\\n    name: redis\\n    namespace: external-services\\n  bindAsFiles: true\\n```\\n\\nYou can create a file `kubernetes/redis.yaml` in your directory containing this snippet,\\nand add a Kubernetes component into your Devfile referring to this YAML file:\\n\\n```yaml\\nmetadata:\\n  name: my-nodejs-app\\n[...]\\ncomponents:\\n[...]\\n- name: binding-to-redis\\n  kubernetes:\\n    uri: kubernetes/redis.yaml\\n```\\n\\nBy adding this Kubernetes component to your Devfile, when you run `odo dev`, the ServiceBinding resource defined\\nin the `kubernetes/redis.yaml` file will be created into the cluster, and the Service Binding Operator will inject\\ninto the application\'s Pod the `host` and `password` necessary to connect to the Redis external service.\\n\\n## Using the variables into the application\'s code\\n\\nThe Devfile is now ready, and the developer can start accessing the external service from the code. \\n\\nThe first step to know how the credentials are exposed into the application\'s container is to start the `odo dev` \\ncommand and to execute the `odo describe binding` command.\\n\\nRunning `odo dev`, you can see that the ServiceBinding resource is deployed to the cluster.\\n\\n```shell\\n$ odo dev\\n[...]\\n\u21aa Deploying to the cluster in developer mode\\n \u2713  Creating kind ServiceBinding [60ms]\\n \u2713  Waiting for Kubernetes resources [10s]\\n \u2713  Syncing files into the container [740ms]\\n \u2713  Building your application in container on cluster [4s]\\n \u2713  Executing the application [1s]\\n[...]\\n```\\n\\nFrom another terminal, running `odo describe binding` will show you the status of the ServiceBinding:\\n\\n```shell\\n$ odo describe binding\\nServiceBinding used by the current component:\\n\\nService Binding Name: binding-to-redis\\nServices:\\n \u2022  redis (Service.)\\nBind as files: true\\nDetect binding resources: false\\nAvailable binding information:\\n \u2022  ${SERVICE_BINDING_ROOT}/binding-to-redis/host\\n \u2022  ${SERVICE_BINDING_ROOT}/binding-to-redis/password\\n```\\n\\nThis output shows that two files `host` and `password` are present in the application\'s container, at the mentioned paths.\\n\\nYou can leverage a servicebinding library to help you access\\nthese files. A complete list of libraries is available on the page [Service Bindings for Application Developers](https://servicebinding.io/application-developer/).\\n\\n\\n## Troubleshooting\\n\\nIf the output of `odo describe binding` shows an unknown status:\\n\\n```\\nAvailable binding information: unknown\\n```\\n\\n- first check if `odo dev` is still running. `odo` is not able to know\\nthe bound credentials if the ServiceBinding resource is not deployed by `odo dev`.\\n- if `odo dev` is running, you can check that the ServiceBinding resource is deployed to the cluster, and if its status is `ApplicationsBound`, with the command:\\n  ```\\n  kubectl get servicebindings.binding.operators.coreos.com\\n  ```\\n- if the status of the ServiceBinding resource displayed in the list is not `ApplicationsBound`, you can get an error message with the command:\\n  ```\\n  kubectl describe servicebindings.binding.operators.coreos.com <service-binding-name>\\n  ```"},{"id":"odo-v3-alpha1-release","metadata":{"permalink":"/odo-gh-actions/blog/odo-v3-alpha1-release","editUrl":"https://github.com/redhat-developer/odo/edit/main/docs/website/blog/2022-05-02-odo-v3-alpha1.md","source":"@site/blog/2022-05-02-odo-v3-alpha1.md","title":"odo v3-alpha1 Released","description":"v3-alpha1 of odo has been released!","date":"2022-05-02T00:00:00.000Z","formattedDate":"May 2, 2022","tags":[{"label":"release","permalink":"/odo-gh-actions/blog/tags/release"}],"readingTime":9.3,"truncated":true,"authors":[{"name":"Parthvi Vala","url":"https://github.com/valaparthvi","image_url":"https://github.com/valaparthvi.png","imageURL":"https://github.com/valaparthvi.png"},{"name":"Philippe Martin","url":"https://github.com/feloy","image_url":"https://github.com/feloy.png","imageURL":"https://github.com/feloy.png"}],"frontMatter":{"title":"odo v3-alpha1 Released","authors":[{"name":"Parthvi Vala","url":"https://github.com/valaparthvi","image_url":"https://github.com/valaparthvi.png","imageURL":"https://github.com/valaparthvi.png"},{"name":"Philippe Martin","url":"https://github.com/feloy","image_url":"https://github.com/feloy.png","imageURL":"https://github.com/feloy.png"}],"tags":["release"],"slug":"odo-v3-alpha1-release"},"prevItem":{"title":"Binding an external service with odo v3","permalink":"/odo-gh-actions/blog/binding-external-service-with-odo-v3"},"nextItem":{"title":"odo 2.5.0 Released","permalink":"/odo-gh-actions/blog/odo-250-release"}},"content":"`v3-alpha1` of odo has been released!\\n\\n\x3c!--truncate--\x3e\\n\\n`odo` is a tool that aims to simplify the life of developers working on cloud-native applications.\\n\\nThanks to the emergence of the [Devfile](https://devfile.io/) open standard, which has been accepted as a CNCF Sandbox project (January 2022), odo v3 is now entirely based on this open standard.\\n\\nThe goal of the Devfile standard is to define the structure of applications and how developers can work on them.\\n\\nA single Devfile defines the smallest building block of an application, that a developer can: build, run, test, debug and deploy. In a cloud-native environment, we generally talk about a micro-service. \\n\\nFirstly, the Devfile describes the container that is needed to be deployed on a cluster during the development phases, along with the commands to execute on this container to build, run, test and debug the program, assuming the sources have been synchronized into the container.\\n\\nSecondly, the Devfile provides the instructions to build the container image ready for production, along with the Kubernetes resources to deploy to the cluster.\\n\\n## An example of a Devfile\\n\\nTo illustrate, here is a simple yet complete Devfile, usable for a Node.js micro-service:\\n\\n```yaml\\nschemaVersion: 2.2.0\\nmetadata:\\n  description: Stack with NodeJS 12\\n  displayName: NodeJS Runtime\\n  language: nodejs\\n  name: my-nodejs-app\\n  projectType: nodejs\\nvariables:\\n  CONTAINER_IMAGE: quay.io/phmartin/myimage\\ncomponents:\\n- name: runtime\\n  container:\\n    endpoints:\\n    - name: http-3000\\n      targetPort: 3000\\n    - name: debug-5858\\n      targetPort: 5858\\n    image: registry.access.redhat.com/ubi8/nodejs-14:latest\\n    memoryLimit: 1024Mi\\n    mountSources: true\\n    sourceMapping: /project\\n- name: outerloop-build\\n  image:\\n    dockerfile:\\n      buildContext: ${PROJECT_ROOT}\\n      rootRequired: false\\n      uri: ./Dockerfile\\n    imageName: \\"{{CONTAINER_IMAGE}}\\"\\n- name: outerloop-deployment\\n  kubernetes:\\n    inlined: |\\n      kind: Deployment\\n      apiVersion: apps/v1\\n      metadata:\\n        name: my-node\\n      spec:\\n        replicas: 1\\n        selector:\\n          matchLabels:\\n            app: node-app\\n        template:\\n          metadata:\\n            labels:\\n              app: node-app\\n          spec:\\n            containers:\\n              - name: my-node\\n                image: {{CONTAINER_IMAGE}}\\n                ports:\\n                  - name: http\\n                    containerPort: 3001\\n                    protocol: TCP\\n                resources:\\n                  limits:\\n                    memory: \\"1024Mi\\"\\n                    cpu: \\"500m\\"\\n- name: outerloop-service\\n  kubernetes:\\n    inlined: |\\n      apiVersion: v1\\n      kind: Service\\n      metadata:\\n        name: svc\\n      spec:\\n        ports:\\n        - name: \\"3000\\"\\n          port: 3000\\n          protocol: TCP\\n          targetPort: 3000\\n        selector:\\n          app: node-app\\n        type: ClusterIP\\ncommands:\\n- id: install\\n  exec:\\n    commandLine: npm install\\n    component: runtime\\n    group:\\n      isDefault: true\\n      kind: build\\n    workingDir: /project\\n- id: run\\n  exec:\\n    commandLine: npm start\\n    component: runtime\\n    group:\\n      isDefault: true\\n      kind: run\\n    workingDir: /project\\n- id: debug\\n  exec:\\n    commandLine: npm run debug\\n    component: runtime\\n    group:\\n      isDefault: true\\n      kind: debug\\n    workingDir: /project\\n- id: test\\n  exec:\\n    commandLine: npm test\\n    component: runtime\\n    group:\\n      isDefault: true\\n      kind: test\\n    workingDir: /project\\n- id: deploy\\n  composite:\\n    commands:\\n    - build-image\\n    - k8s-deployment\\n    - k8s-service\\n    group:\\n      isDefault: true\\n      kind: deploy\\n- id: build-image\\n  apply:\\n    component: outerloop-build\\n- id: k8s-deployment\\n  apply:\\n    component: outerloop-deployment\\n- id: k8s-service\\n  apply:\\n    component: outerloop-service\\nstarterProjects:\\n- name: nodejs-starter\\n  git:\\n    remotes:\\n      origin: https://github.com/odo-devfiles/nodejs-ex.git\\n```\\n\\nThe `runtime` component defines the container that will be deployed to support the program in development. Specifically, it will use the image `registry.access.redhat.com/ubi8/nodejs-14:latest`, and sources should be placed in the `/project` directory of the container. Two endpoints are also defined, one to access the micro-service, the other to help the debugger attach to the process, during debugging sessions.\\n\\nThe commands `install`, `run`, `debug` and `test` indicate which commands to execute to respectively build, execute, debug and test the application. For example, the `npm install` command will be executed in the container to build the application, then `npm start` will be executed to start the application.\\n\\nTo deploy the micro-service, the component `outerloop-build` indicates how to build the production image (by using `./Dockerfile`, and creating an image whose name is defined by the variable `CONTAINER_IMAGE` defined at the beginning of the devfile). Then, two other components `outerloop-deployment` and `outerloop-service` define the Kubernetes resources to deploy to the cluster. Note that the first one defines a Deployment that will help deploy a container using the image built with the previous `outerloop-build` component. And, the second `outerloop-service` component will help expose the deployment created by `outerloop-deployment` component.\\n\\nThe `starterProjects` section at the end of the Devfile indicates a list of starter projects, that can be downloaded to have an example of program deployable with this Devfile.\\n\\n## Devfile registry\\n\\nWe can see through the previous example that a Devfile is generic enough, with only a few specific values, like the endpoints and the image names. A Devfile written for a specific language and framework can be used by most of the programs written using this language and framework, with minimum personalization.\\n\\nA Devfile registry is available at https://registry.devfile.io, containing Devfiles for a large variety of languages and frameworks, and you can deploy your own registry to make accessible your own Devfiles.\\n\\n## Introducing `odo` v3\\n\\nYou can find the instructions to install `odo` v3-alpha1 from [this release page](https://github.com/redhat-developer/odo/releases/tag/v3.0.0-alpha1). The binaries are accessible [here](https://developers.redhat.com/content-gateway/rest/mirror/pub/openshift-v4/clients/odo/v3.0.0~alpha1/).\\n\\n### Initializing a project\\n\\nThe `odo init` command is the first command to use, before starting to use `odo` with your project. The goal of this first step is to get a suitable Devfile for your project.\\n\\n`odo init` will search for Devfiles in the Devfile registries. By default, `odo` is configured to access only one Devfile registry (the one specified above), and you can modify the Devfile registries `odo` is accessing using the command `odo preference registry`.\\n\\nThis `odo init` command offers two modes, either interactive, or manual. The interactive mode will help you discover the appropriate Devfile. To use the interactive mode, you just need to enter `odo init` in your command line.\\n\\nIf you execute this command from a directory containing sources, `odo` will try to recognize the language and framework you are using, will search into the Devfile registries that you have configured for the most appropriate Devfile, and give you the choice to use it, or to search for another one. \\n\\n```\\n$ odo init\\n  __\\n /  \\\\__     Initializing new component\\n \\\\__/  \\\\    Files: Source code detected, a Devfile will be determined based upon source code autodetection\\n /  \\\\__/    odo version: v3.0.0-alpha1\\n \\\\__/\\n\\nInteractive mode enabled, please answer the following questions:\\nBased on the files in the current directory odo detected\\nLanguage: javascript\\nProject type: nodejs\\nThe devfile \\"nodejs\\" from the registry \\"DefaultDevfileRegistry\\" will be downloaded.\\n? Is this correct? (Y/n) \\n```\\n\\nIf you answer `No` here, or if you run the `odo init` command from an empty directory, `odo init` will help you choose the appropriate Devfile. The command will also help you make some personalization on the Devfile, by personalizing the endpoints and the environment variables for the container that will be deployed during the development phase.\\n\\n```\\n? Select language: javascript\\n? Select project type: Node.js Runtime\\n \u2713  Downloading devfile \\"nodejs\\" from registry \\"DefaultDevfileRegistry\\" [961ms]\\nCurrent component configuration:\\nContainer \\"runtime\\":\\n  Opened ports:\\n   - 3000\\n  Environment variables:\\n? Select container for which you want to change configuration? NONE - configuration is correct\\n? Enter component name: my-nodejs-app\\n\\nYour new component \'my-nodejs-app\' is ready in the current directory.\\nTo start editing your component, use \'odo dev\' and open this folder in your favorite IDE.\\nChanges will be directly reflected on the cluster.\\n```\\n\\nFinally, if you start the `odo init` command from an empty directory, it will give you the choice to download one of the starter projects listed in the Devfile.\\n\\n## The development phase\\n\\nNow that a Devfile is present in the current directory, you can run your application in the development mode, using the `odo dev` command. This command will create a `Deployment` in the cluster that will help start a container as defined in the Devfile. Then, the sources present in the current directory will be synchronized into the container, and the commands to build and run the application will be executed from inside the container.\\n\\nAt the same time, a port-forwarding will be done for each endpoint defined in the Devfile, so you can access the container ports through local ports in your development machine.\\n\\nFinally, `odo` will watch for changes in the current directory. When files are modified, added or deleted, `odo` will synchronize the changes to the container, and will restart the build and run commands from inside the container.\\n\\n```\\n$ odo dev\\n  __\\n /  \\\\__     Developing using the my-nodejs-app Devfile\\n \\\\__/  \\\\    Namespace: prj2\\n /  \\\\__/    odo version: v3.0.0-alpha1\\n \\\\__/\\n\\n\u21aa Deploying to the cluster in developer mode\\n \u2713  Waiting for Kubernetes resources [6s]\\n \u2713  Syncing files into the container [439ms]\\n \u2713  Building your application in container on cluster [3s]\\n \u2713  Executing the application [1s]\\n\\nYour application is now running on the cluster\\n - Forwarding from 127.0.0.1:40001 -> 3000\\n - Forwarding from 127.0.0.1:40002 -> 5858\\n\\nWatching for changes in the current directory /home/phmartin/Documents/tests/devto-deploy\\nPress Ctrl+c to exit `odo dev` and delete resources from the cluster\\n```\\n\\nTo be able to debug the application, you will need to run the `odo dev --debug` command instead.\\n\\nWhen you have finished the development session, you just need to hit Ctrl-c to stop the `odo dev` command. The command won\'t terminate immediately, as it will delete the resources it has deployed on the cluster before exiting.\\n\\n## The deployment phase\\n\\nWhen you are satisfied with your program, you may want to deploy it. The first step would be to build the container image using a `Dockerfile`, instead of using a generic image as during the development phase. The second step would be to deploy personalized resources, instead of the Deployment used during the development phase.\\n\\nAt the time of this blog post, no Devfile within the default Devfile registry contains instructions for the deployment phase. By using the Devfile provided as an example above, the command `odo deploy` will build the container image using the `Dockerfile` present in the directory, and then deploy a personalized Deployment using the container image and a Service into the cluster.\\n\\n```\\n$ odo deploy\\n  __\\n /  \\\\__     Deploying the application using my-nodejs-app Devfile\\n \\\\__/  \\\\    Namespace: prj2\\n /  \\\\__/    odo version: v3.0.0-alpha1\\n \\\\__/\\n\\n\u21aa Building & Pushing Container: quay.io/phmartin/myimage\\n \u2022  Building image locally  ...\\nSTEP 1/7: FROM docker.io/library/node:17\\nSTEP 2/7: WORKDIR /usr/src/app\\n[...]\\nSTEP 7/7: CMD [ \\"node\\", \\"server.js\\" ]\\nCOMMIT quay.io/phmartin/myimage\\n \u2713  Building image locally [6s]\\n \u2022  Pushing image to container registry  ...\\n[...]\\nWriting manifest to image destination\\nStoring signatures\\n \u2713  Pushing image to container registry [8s]\\n\\n\u21aa Deploying Kubernetes Component: my-node\\n \u2713  Searching resource in cluster \\n \u2713  Creating kind Deployment [50ms]\\n\\n\u21aa Deploying Kubernetes Component: svc\\n \u2713  Searching resource in cluster \\n \u2713  Creating kind Service [57ms]\\n\\nYour Devfile has been successfully deployed\\n```\\n\\nAt any moment, you can check if a component has been deployed by using the `odo list` command.\\n\\n```\\n$ odo list\\n \u2713  Listing components from namespace \'prj2\' [61ms]\\n NAME             PROJECT TYPE  RUNNING IN  MANAGED \\n * my-nodejs-app  nodejs        Deploy      odo     \\n```\\n\\nWhen you are done with this application or if you want to undeploy it to work on development mode again, you can use the `odo delete component` to undeploy the component from the cluster.\\n\\n```\\n$ odo delete component\\nSearching resources to delete, please wait...\\nThis will delete \\"my-nodejs-app\\" from the namespace \\"prj2\\".\\n \u2022  The component contains the following resources that will get deleted:\\n\\t- Deployment: my-node\\n\\t- Service: svc\\n? Are you sure you want to delete \\"my-nodejs-app\\" and all its resources? Yes\\nThe component \\"my-nodejs-app\\" is successfully deleted from namespace \\"prj2\\"\\n```\\n\\n## Demo\\n\\n<iframe width=\\"740\\" height=\\"500\\" src=\\"https://www.youtube.com/embed/fw2_cVj3Mv4\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>"},{"id":"odo-250-release","metadata":{"permalink":"/odo-gh-actions/blog/odo-250-release","editUrl":"https://github.com/redhat-developer/odo/edit/main/docs/website/blog/2022-01-14-odo-v2.5.0.md","source":"@site/blog/2022-01-14-odo-v2.5.0.md","title":"odo 2.5.0 Released","description":"2.5.0 of odo has been released!","date":"2022-01-14T00:00:00.000Z","formattedDate":"January 14, 2022","tags":[{"label":"release","permalink":"/odo-gh-actions/blog/tags/release"}],"readingTime":2.285,"truncated":true,"authors":[{"name":"Tomas Kral","url":"https://github.com/kadel","imageURL":"https://github.com/kadel.png"}],"frontMatter":{"title":"odo 2.5.0 Released","author":"Tomas Kral","author_url":"https://github.com/kadel","author_image_url":"https://github.com/kadel.png","tags":["release"],"slug":"odo-250-release"},"prevItem":{"title":"odo v3-alpha1 Released","permalink":"/odo-gh-actions/blog/odo-v3-alpha1-release"},"nextItem":{"title":"odo 2.4.3 Released","permalink":"/odo-gh-actions/blog/odo-243-release"}},"content":"`2.5.0` of odo has been released!\\n\\n\x3c!--truncate--\x3e\\n\\n## Notable changes in odo 2.5.0\\n\\n### Support for ephemeral field in Devfile `volumes` definition ([#5279](https://github.com/redhat-developer/odo/pull/5279) [@feloy](https://github.com/feloy))\\n\\nodo now supports Devfile volumes that are defined as ephemeral. If a volume is defined with `ephemeral: true` odo will create it as a Kubernetes `emptyDir` volume.\\n\\nExample of an ephemeral volume definition inside `devfile.yaml`\\n\\n```yaml\\n- name: volume-test\\n  volume:\\n    size: 1Gi\\n    ephemeral: true\\n```\\n\\n### Delete outer loop resources with `odo delete --deploy`([PR#5276](https://github.com/redhat-developer/odo/pull/5276) [@valaparthvi](https://github.com/valaparthvi))\\n\\nYou can now delete resources that were deployed using odo deploy via the odo delete --deploy command.\\n`odo delete --all` now deletes everything from the cluster related to the given Devfile including outer loop resources.\\n\\n|Delete command| Deletes resources from cluster | Deletes local `devfile.yaml` |\\n|-|-|-|\\n|`odo delete` | YES (deletes resources created using `odo push`) | NO |\\n|`odo delete --deploy` |YES (deletes resources created using `odo deploy`) | NO |\\n|`odo delete --all`| YES (deletes all resources created by odo) | YES|\\n\\n\\n### Add suppport for cpuLimit, cpuRequest and memoryRequest ([PR#5252](https://github.com/redhat-developer/odo/pull/5252) [@anandrkskd](https://github.com/anandrkskd))\\n\\nodo now supports specifying additional resource constraints for `container` components in Devfile as introduced by Devfile v2.1.0.\\n\\nYou can use the following constraints:\\n\\n| Devfile container field | Kubernetes equivalent in Pod specification (`spec.containers[].`)  | Description |\\n|-|-|-|\\n|`memoryLimit`| `resources.limits.memory` | Describes the maximum allowed memory for the container. |\\n|`memoryRequest`| `resources.requests.cpu`  | Describes the minimum memory that the container requires. |\\n|`cpuLimit`| `resources.limits.cpu` | Describes the maximum allowed CPU cores for the container  |\\n|`cpuRequest`| `resources.requests.cpu` | Describes the minimum number of CPU cores that the container requires. |\\n\\nYou can learn more about resource management in [Resource Management for Pods and Containers](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/) section in [Kubernetes documentation](https://kubernetes.io/docs/)\\n\\nExample of a Devfile container with all available resource constraints:\\n\\n```yaml\\ncomponents:\\n  - name: runtime\\n    container:\\n      image: registry.access.redhat.com/ubi8/nodejs-12:1-36\\n      memoryLimit: 1024Mi\\n      memoryRequest: 512Mi\\n      cpuLimit: \'1\'\\n      cpuRequest: 200m\\n      endpoints:\\n        - name: \\"3000-tcp\\"\\n          targetPort: 3000\\n      mountSources: true\\n```\\n\\n### Adds mapping support to odo link ([PR#5237](https://github.com/redhat-developer/odo/pull/5237) [@dharmit](https://github.com/dharmit))\\n\\nYou can specify custom Service Binding mappings using `odo link` command.\\n\\nFor example, with the following link command\\n\\n```sh\\nodo link PostgresCluster/hippo --map pgVersion=\'{{ .database.spec.postgresVersion }}\'\\n```\\n\\nOdo will generate `ServiceBinding` resource similar to\\n\\n```yaml\\napiVersion: binding.operators.coreos.com/v1alpha1\\nkind: ServiceBinding\\nmetadata:\\n  creationTimestamp: null\\n  name: myapp-postgrescluster-hippo\\nspec:\\n  application:\\n    group: apps\\n    name: myapp-app\\n    resource: deployments\\n    version: v1\\n  bindAsFiles: false\\n  detectBindingResources: true\\n  mappings:\\n  - name: pgVersion\\n    value: \'{{ .database.spec.postgresVersion }}\'\\n  services:\\n  - group: postgres-operator.crunchydata.com\\n    id: hippo\\n    kind: PostgresCluster\\n    name: hippo\\n    version: v1beta1\\n```\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/iH5asqZiMUA\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n\\n\\nYou can find more information about how to  [compose custom binding data](https://redhat-developer.github.io/service-binding-operator/userguide/creating-service-bindings/binding-options.html#_compose_custom_binding_data) in [Service Binding Operator Documentation](https://redhat-developer.github.io/service-binding-operator/)\\n\\nAs with every release, you can find the full list of changes and bug fixes on the [GitHub release page](https://github.com/redhat-developer/odo/releases/tag/v2.5.0)"},{"id":"odo-243-release","metadata":{"permalink":"/odo-gh-actions/blog/odo-243-release","editUrl":"https://github.com/redhat-developer/odo/edit/main/docs/website/blog/2021-12-14-odo-v2.4.3.md","source":"@site/blog/2021-12-14-odo-v2.4.3.md","title":"odo 2.4.3 Released","description":"2.4.3 of odo has been released!","date":"2021-12-14T00:00:00.000Z","formattedDate":"December 14, 2021","tags":[{"label":"release","permalink":"/odo-gh-actions/blog/tags/release"}],"readingTime":1.055,"truncated":true,"authors":[{"name":"Tomas Kral","url":"https://github.com/kadel","imageURL":"https://github.com/kadel.png"}],"frontMatter":{"title":"odo 2.4.3 Released","author":"Tomas Kral","author_url":"https://github.com/kadel","author_image_url":"https://github.com/kadel.png","tags":["release"],"slug":"odo-243-release"},"prevItem":{"title":"odo 2.5.0 Released","permalink":"/odo-gh-actions/blog/odo-250-release"},"nextItem":{"title":"odo 2.0.0 Backward Incompatible Changes","permalink":"/odo-gh-actions/blog/breaking-changes-in-odo-2.2"}},"content":"`2.4.3` of odo has been released!\\n\\n\x3c!--truncate--\x3e\\n\\n## Notable changes in odo 2.4.3\\n\\n### Features/Enhancements:\\n\\n#### `odo deploy` command [#5228](https://github.com/redhat-developer/odo/issues/5228) ([@feloy](https://github.com/feloy))\\nIn Devfile specificion v2.2.0 new component `image` and command group `deploy` were introduced.\\n`odo deploy` command uses those features to allow users, deploy their application as it would be deployed in production. To build container images `odo deploy` requires Podman or Docker to be installed on your machine.\\n\\nYou can find example of how to use `image` component and `deploy` command group in devfile.yaml in [devfile-nodejs-deploy](https://github.com/kadel/devfile-nodejs-deploy) repository.\\n\\n#### Demo\\n```sh\\n$ git clone https://github.com/kadel/devfile-nodejs-deploy\\n$ cd devfile-nodejs-deploy\\n$ odo project create nodejs-example\\n$ odo create\\n$ odo deploy\\n```\\n[![asciicast](https://asciinema.org/a/NAR0IDRqdmEcHWSD32Ebs8XtW.svg)](https://asciinema.org/a/NAR0IDRqdmEcHWSD32Ebs8XtW)\\n\\n#### Know issues wth `odo deploy`\\n\\n- Resources deployed using `odo deploy` can\'t be deleted using odo [#5246](https://github.com/redhat-developer/odo/issues/5246)\\n- `odo deploy` doesn\'t work without running `odo create` or `odo push` first. [#5289](https://github.com/redhat-developer/odo/issues/5289)\\n- There is no odo command that would show if `odo deploy` was executed or not and what is its status [#5248](https://github.com/redhat-developer/odo/issues/5248)\\n\\n\\n\\n\\n\\n### Bug fixes:\\n\\n- Fix odo config view [#5234](https://github.com/redhat-developer/odo/issues/5234) ([@anandrkskd](https://github.com/anandrkskd))\\n- Corrects service creation help message [#5229](https://github.com/redhat-developer/odo/issues/5229) ([@dharmit](https://github.com/dharmit))\\n- Add starter project name in doc [#5225](https://github.com/redhat-developer/odo/issues/5225) ([dharmit](https://github.com/dharmit))\\n- Catalog describe service displays info about []object fields [#5223](https://github.com/redhat-developer/odo/issues/5223) ([@feloy](https://github.com/feloy))\\n- Fix help for odo link [#5227](https://github.com/redhat-developer/odo/issues/5227) ([@kadel](https://github.com/kadel))"},{"id":"breaking-changes-in-odo-2.2","metadata":{"permalink":"/odo-gh-actions/blog/breaking-changes-in-odo-2.2","editUrl":"https://github.com/redhat-developer/odo/edit/main/docs/website/blog/2021-05-04-odo-v2.2.0-breaking-changes.md","source":"@site/blog/2021-05-04-odo-v2.2.0-breaking-changes.md","title":"odo 2.0.0 Backward Incompatible Changes","description":"odo 2.0.0 Backward Incompatible Changes","date":"2021-05-04T00:00:00.000Z","formattedDate":"May 4, 2021","tags":[{"label":"release","permalink":"/odo-gh-actions/blog/tags/release"}],"readingTime":2.555,"truncated":true,"authors":[{"name":"Girish Ramnani","url":"https://github.com/girishramnani","imageURL":"https://github.com/girishramnani.png"}],"frontMatter":{"title":"odo 2.0.0 Backward Incompatible Changes","author":"Girish Ramnani","author_url":"https://github.com/girishramnani","author_image_url":"https://github.com/girishramnani.png","tags":["release"],"slug":"breaking-changes-in-odo-2.2"},"prevItem":{"title":"odo 2.4.3 Released","permalink":"/odo-gh-actions/blog/odo-243-release"},"nextItem":{"title":"odo 2.0.1 Release","permalink":"/odo-gh-actions/blog/odo-201-release"}},"content":"odo 2.0.0 Backward Incompatible Changes\\n\\n\x3c!--truncate--\x3e\\n### Backward Incompatible Changes in odo 2.0.0\\n\\nThis document outlines the backward incompatible changes that were introduced in odo 2.2. With the increased adoption of [Devfile](https://devfile.github.io/) we have started to reduce odo\u2019s dependency on S2I(Source-to-Image). If you no longer work with Source-to-Image containers, this does not apply.\\n\\n1. `odo create --s2i <component-type>` **will create a converted Devfile based component on the S2I images of that component type.**\\n\\n   ```shell\\n   odo create --s2i nodejs\\n   ```\\n\\n   Output -\\n   ```shell\\n   $ odo create nodejs --s2i\\n   Validation\\n    \u2713  Validating component [424ms]\\n   Conversion\\n    \u2713  Successfully generated devfile.yaml and env.yaml for provided S2I component\\n\\n   Please use `odo push` command to create the component with source deployed\\n   ```\\n   \\n   The above command would generate a `devfile.yaml` which would be using the S2I images and variables that are part of the `nodejs`.\\n\\n   This change will not break any existing S2I components. Although you are encouraged to convert them to devfile using `odo utils convert-to-devfile`.\\n\\n2. **Currently devfile components do not support `--git` and `--binary` components hence we still use S2I component flow to create them.**\\n\\n   ```shell\\n   $ odo create java --s2i --git ./build.war\\n   Validation\\n    \u2713  Validating component [431ms]\\n   \\n   Please use `odo push` command to create the component with source deployed\\n\\n   ```\\n   Observe that there was no conversion done here.\\n\\n\\n3.  **`odo env set DebugPort` won\'t work with converted devfile components, you would need to use `odo config set --env DEBUG_PORT` instead.**\\n\\n   Currently, the `wildfly` and `dotnet` component types do not work when converted. We have an issue open for this - <https://github.com/redhat-developer/odo/issues/4623>\\n\\n### Known bugs and limitations\\n- https://github.com/redhat-developer/odo/issues/4623\\n- https://github.com/redhat-developer/odo/issues/4615\\n- https://github.com/redhat-developer/odo/issues/4594\\n- https://github.com/redhat-developer/odo/issues/4593\\n\\n\\n### Frequently asked questions\\n1. Why does odo fail create to URL using `odo url create` for a component created using `odo create --s2i` even though `odo url create` is allowed for devfile?\\n\\n   * It won\u2019t fail in the sense that if you tried the conventional s2i approach and try to create `odo url create` it would fail with url for 8080 port already present as there would already be one for you. Refer - https://github.com/redhat-developer/odo/issues/4621\\n\\n2. How to understand the status of the debug?\\n\\n   * `odo env set DebugPort` won\'t work, instead you would need to use `odo config set --env DEBUG_PORT` - this is because the s2i to devfile converted devfiles don\'t have a debug type command defined in them. We would fix this too.\\n\\n3. If every component will now be reported as devfile component, then what about existing S2I components?\\n\\n   * They should work as is. Check `odo list` for a simpler check. Somethings might still break since it is quite complex to make things work across the board.\\n\\n\\n4. If oc based checks in tests are not going to work, is there an alternative odo support around it ?\\n   \\n   * It would\u2019t be right to say that you cannot use `oc` based checks, but they would break because now the s2i components are being converted to devfile, odo would generate a Kubernetes `Deployment` but the `oc` would try to find a `DeploymentConfig` on the cluster."},{"id":"odo-201-release","metadata":{"permalink":"/odo-gh-actions/blog/odo-201-release","editUrl":"https://github.com/redhat-developer/odo/edit/main/docs/website/blog/2020-10-28-odo-v2.0.1-release.md","source":"@site/blog/2020-10-28-odo-v2.0.1-release.md","title":"odo 2.0.1 Release","description":"2.0.1 of odo has been released!","date":"2020-10-28T00:00:00.000Z","formattedDate":"October 28, 2020","tags":[{"label":"release","permalink":"/odo-gh-actions/blog/tags/release"}],"readingTime":4.945,"truncated":true,"authors":[{"name":"Charlie Drage","url":"https://github.com/cdrage","imageURL":"https://github.com/cdrage.png"}],"frontMatter":{"title":"odo 2.0.1 Release","author":"Charlie Drage","author_url":"https://github.com/cdrage","author_image_url":"https://github.com/cdrage.png","tags":["release"],"slug":"odo-201-release"},"prevItem":{"title":"odo 2.0.0 Backward Incompatible Changes","permalink":"/odo-gh-actions/blog/breaking-changes-in-odo-2.2"},"nextItem":{"title":"odo 2.0.0 GA Release","permalink":"/odo-gh-actions/blog/odo-200-release"}},"content":"`2.0.1` of odo has been released!\\n\\n\x3c!--truncate--\x3e\\n\\n### What\'s new\\n\\n\\n#### Secure starter project support\\n\\nWith this release, you can now deploy a component directly from a secure registry.\\n\\n```sh\\n$ odo create nodejs --registry <secure registry name> --starter --starter-token <starter project token>\\n```\\n\\n#### App comands\\n\\nA series of new commands have been added to `app`.\\n\\nYou can now `list`, `describe` and `delete` an app with the following commands:\\n\\n```sh\\n  $ odo app list\\n  $ odo app describe <app-name>\\n  $ odo app delete <app-name>\\n```\\n\\n#### PROJECT_SOURCE env variables\\n\\n`PROJECT_SOURCE` now works as an environment variable when specifying a `workingDir` inside a `devfile.yaml`.\\n\\n```sh\\n $ export PROJECT_SOURCE=/tmp/foobar/\\n```\\n\\n```yaml\\n- exec:\\n    commandLine: mvn -Dmaven.repo.local=/home/user/.m2/repository spring-boot:run\\n    workingDir: ${PROJECT_SOURCE}\\n```\\n\\n### Full changelog\\n\\n**New features:**\\n\\n- odo url delete should work without arguments [\\\\#4106](https://github.com/redhat-developer/odo/issues/4106)\\n- When using a devfile with multiple starter projects, odo should ask the user which one to use [\\\\#3812](https://github.com/redhat-developer/odo/issues/3812)\\n- Add support for overriding composite commands [\\\\#3759](https://github.com/redhat-developer/odo/issues/3759)\\n- Release 2.0.1 of odo [\\\\#4152](https://github.com/redhat-developer/odo/pull/4152) ([cdrage](https://github.com/cdrage))\\n- feat: Allow composite commands to be overridden [\\\\#4043](https://github.com/redhat-developer/odo/pull/4043) ([johnmcollier](https://github.com/johnmcollier))\\n- Update build version to 2.0.0 [\\\\#4022](https://github.com/redhat-developer/odo/pull/4022) ([cdrage](https://github.com/cdrage))\\n- Adds app commands for devfile components [\\\\#4007](https://github.com/redhat-developer/odo/pull/4007) ([mik-dass](https://github.com/mik-dass))\\n- Update integration testcases and e2e testcases for ppc64le support [\\\\#4000](https://github.com/redhat-developer/odo/pull/4000) ([sarveshtamba](https://github.com/sarveshtamba))\\n- Save PROJECT\\\\_SOURCE for containers mounting source [\\\\#3979](https://github.com/redhat-developer/odo/pull/3979) ([maysunfaisal](https://github.com/maysunfaisal))\\n- Secure starter project support [\\\\#3743](https://github.com/redhat-developer/odo/pull/3743) ([GeekArthur](https://github.com/GeekArthur))\\n\\n**Code Refactoring:**\\n\\n- Refactor devfile parser code to produce a common devfile parser can work in all tools [\\\\#4073](https://github.com/redhat-developer/odo/issues/4073)\\n- Removing mongo db operator [\\\\#4127](https://github.com/redhat-developer/odo/pull/4127) ([prietyc123](https://github.com/prietyc123))\\n- Ignore lifecycle/rotten labels when generating changelog [\\\\#4122](https://github.com/redhat-developer/odo/pull/4122) ([cdrage](https://github.com/cdrage))\\n- Refactor validate pkg for generic and odo validation [\\\\#4085](https://github.com/redhat-developer/odo/pull/4085) ([maysunfaisal](https://github.com/maysunfaisal))\\n- Refactor: fix s2i flag for odo create [\\\\#4075](https://github.com/redhat-developer/odo/pull/4075) ([dev-gaur](https://github.com/dev-gaur))\\n- Added odo watch test with debug flag [\\\\#4067](https://github.com/redhat-developer/odo/pull/4067) ([prietyc123](https://github.com/prietyc123))\\n- Fixing typo and cleanup unused code [\\\\#4064](https://github.com/redhat-developer/odo/pull/4064) ([prietyc123](https://github.com/prietyc123))\\n- Refractor before and after each also few clean up in test scripts [\\\\#4047](https://github.com/redhat-developer/odo/pull/4047) ([prietyc123](https://github.com/prietyc123))\\n- removed some irrelevant steps from odo create and cleanup [\\\\#3989](https://github.com/redhat-developer/odo/pull/3989) ([girishramnani](https://github.com/girishramnani))\\n\\n**Bugs:**\\n\\n- Nit: odo url list shows :// before it is pushed [\\\\#4109](https://github.com/redhat-developer/odo/issues/4109)\\n- odo storage create should create without a path [\\\\#4101](https://github.com/redhat-developer/odo/issues/4101)\\n- odo push fails for s2i components [\\\\#4071](https://github.com/redhat-developer/odo/issues/4071)\\n- odo devfile push command tests failed with error \\"Failed to create the component: error while waiting for deployment rollout: watch channel was closed\\"\\" [\\\\#4058](https://github.com/redhat-developer/odo/issues/4058)\\n- odo create: --s2i flag is broken [\\\\#4048](https://github.com/redhat-developer/odo/issues/4048)\\n- Overriding parent devfile\'s commands no longer works [\\\\#4038](https://github.com/redhat-developer/odo/issues/4038)\\n- Unable to mount bootstrap volume to deployment config sub path \\"ODO\\\\_S2I\\\\_DEPLOYMENT\\\\_DIR\\" on 4.6 cluster [\\\\#4015](https://github.com/redhat-developer/odo/issues/4015)\\n- component volumeMount path validation error [\\\\#4005](https://github.com/redhat-developer/odo/issues/4005)\\n- devfile volume component size bug [\\\\#4004](https://github.com/redhat-developer/odo/issues/4004)\\n- odo rewrite should preserve \\"unknown\\" properties of \'metadata\' \\\\(and other optional properties?\\\\) per devfile schema  [\\\\#3968](https://github.com/redhat-developer/odo/issues/3968)\\n- Beta release: Operator Hub does NOT work & tests are disabled \\\\(tracking issue\\\\)  [\\\\#3932](https://github.com/redhat-developer/odo/issues/3932)\\n- Switching from run to debug mode shows no build but build occurs [\\\\#3929](https://github.com/redhat-developer/odo/issues/3929)\\n- odo allows devfile commands with duplicate ids [\\\\#3886](https://github.com/redhat-developer/odo/issues/3886)\\n- Odo fails when devfile component container name is really long [\\\\#3698](https://github.com/redhat-developer/odo/issues/3698)\\n- nit: dont show url as :// in odo url list [\\\\#4111](https://github.com/redhat-developer/odo/pull/4111) ([girishramnani](https://github.com/girishramnani))\\n- Update vendor-update makefile target [\\\\#4086](https://github.com/redhat-developer/odo/pull/4086) ([johnmcollier](https://github.com/johnmcollier))\\n- read s2i paths from both Config and ContainerConfig [\\\\#4068](https://github.com/redhat-developer/odo/pull/4068) ([kadel](https://github.com/kadel))\\n- Fixes message indicating no build when run mode is switched [\\\\#4066](https://github.com/redhat-developer/odo/pull/4066) ([mik-dass](https://github.com/mik-dass))\\n- Update configure-installer-tests-cluster-ppc64le.sh script to import right imagestream for tests. [\\\\#4065](https://github.com/redhat-developer/odo/pull/4065) ([sarveshtamba](https://github.com/sarveshtamba))\\n- Default vol mount path to vol name if absent [\\\\#4045](https://github.com/redhat-developer/odo/pull/4045) ([maysunfaisal](https://github.com/maysunfaisal))\\n- make odo list\'s output for no components consistent [\\\\#4029](https://github.com/redhat-developer/odo/pull/4029) ([girishramnani](https://github.com/girishramnani))\\n- Don\'t allow duplicate command IDs [\\\\#4001](https://github.com/redhat-developer/odo/pull/4001) ([johnmcollier](https://github.com/johnmcollier))\\n- 3968-add more optional metadata [\\\\#3987](https://github.com/redhat-developer/odo/pull/3987) ([yangcao77](https://github.com/yangcao77))\\n- Update s2i image for the library change on s390x plaftorm. [\\\\#3974](https://github.com/redhat-developer/odo/pull/3974) ([zhengxiaomei123](https://github.com/zhengxiaomei123))\\n- add container name validation during creation and push [\\\\#3959](https://github.com/redhat-developer/odo/pull/3959) ([yangcao77](https://github.com/yangcao77))\\n- Fix deletion of files and folders created during watch [\\\\#3890](https://github.com/redhat-developer/odo/pull/3890) ([mik-dass](https://github.com/mik-dass))\\n\\n**Tests:**\\n\\n- Added missing s2i flag for e2e test [\\\\#4019](https://github.com/redhat-developer/odo/pull/4019) ([prietyc123](https://github.com/prietyc123))\\n- replace unrecognised vendor dependency in go mod [\\\\#4012](https://github.com/redhat-developer/odo/pull/4012) ([prietyc123](https://github.com/prietyc123))\\n\\n**Documentation & Discussions:**\\n\\n- Unexpected mention of \'crc\' in \'kubernetes prerequisites\' [\\\\#4113](https://github.com/redhat-developer/odo/issues/4113)\\n- fix windows installation instructions [\\\\#4077](https://github.com/redhat-developer/odo/issues/4077)\\n- Update debugging page on how to debug via application + IDEs [\\\\#3971](https://github.com/redhat-developer/odo/issues/3971)\\n- installing odo documents changes for IBM  Z platform  [\\\\#3913](https://github.com/redhat-developer/odo/issues/3913)\\n- Developer CLI odo doc needs update [\\\\#3878](https://github.com/redhat-developer/odo/issues/3878)\\n- odo cli reference doc still pointing to old reference examples [\\\\#3870](https://github.com/redhat-developer/odo/issues/3870)\\n- Add documentation of storage commands for devfile components [\\\\#3761](https://github.com/redhat-developer/odo/issues/3761)\\n- Update deploying a devfile documentation [\\\\#4133](https://github.com/redhat-developer/odo/pull/4133) ([cdrage](https://github.com/cdrage))\\n- Add links to new Kubernetes Slack [\\\\#4128](https://github.com/redhat-developer/odo/pull/4128) ([cdrage](https://github.com/cdrage))\\n- Update secure registry documentation [\\\\#4099](https://github.com/redhat-developer/odo/pull/4099) ([cdrage](https://github.com/cdrage))\\n- Update doc to support installation on IBM Power for the latest version.\\\\[skip ci\\\\] [\\\\#4049](https://github.com/redhat-developer/odo/pull/4049) ([sarveshtamba](https://github.com/sarveshtamba))\\n- Fixes sections in Opreator Hub documentation [\\\\#4041](https://github.com/redhat-developer/odo/pull/4041) ([dharmit](https://github.com/dharmit))\\n- Update doc to support installation on IBM Z for the latest version.\\\\[skip ci\\\\] [\\\\#4040](https://github.com/redhat-developer/odo/pull/4040) ([zhengxiaomei123](https://github.com/zhengxiaomei123))\\n- Update the installation page and blog [\\\\#4032](https://github.com/redhat-developer/odo/pull/4032) ([cdrage](https://github.com/cdrage))\\n- Add blog post regarding 2.0.0 GA release [\\\\#4026](https://github.com/redhat-developer/odo/pull/4026) ([cdrage](https://github.com/cdrage))\\n- Update asciinema on the README [\\\\#4020](https://github.com/redhat-developer/odo/pull/4020) ([cdrage](https://github.com/cdrage))\\n- Fix minor docs issue in community page [\\\\#3999](https://github.com/redhat-developer/odo/pull/3999) ([cdrage](https://github.com/cdrage))\\n- Update the debugging documentation [\\\\#3972](https://github.com/redhat-developer/odo/pull/3972) ([cdrage](https://github.com/cdrage))\\n- Adds a document regarding the usage of storage commands. [\\\\#3936](https://github.com/redhat-developer/odo/pull/3936) ([mik-dass](https://github.com/mik-dass))\\n\\n**Closed issues:**\\n\\n- Create Windows Chocolatey package [\\\\#4078](https://github.com/redhat-developer/odo/issues/4078)\\n- Discussion about PVC usage for non root containers in OpenShift default namespace [\\\\#4053](https://github.com/redhat-developer/odo/issues/4053)\\n- Openshift 4.6 code freeze interoperability testing [\\\\#3994](https://github.com/redhat-developer/odo/issues/3994)\\n- Setup periodic testing on internal openstack [\\\\#3953](https://github.com/redhat-developer/odo/issues/3953)\\n- Beta testing on windows and macOS [\\\\#3952](https://github.com/redhat-developer/odo/issues/3952)\\n- $PROJECT\\\\_SOURCE env variable [\\\\#3781](https://github.com/redhat-developer/odo/issues/3781)\\n- Download of starter project stored in a secure repo [\\\\#3574](https://github.com/redhat-developer/odo/issues/3574)\\n- Support downloading starter project from secure repository/host [\\\\#3567](https://github.com/redhat-developer/odo/issues/3567)\\n\\n**Merged pull requests:**\\n\\n- Revert \\"Updating golang version to 1.15\\" [\\\\#4132](https://github.com/redhat-developer/odo/pull/4132) ([girishramnani](https://github.com/girishramnani))\\n- Updating golang version to 1.15 [\\\\#4121](https://github.com/redhat-developer/odo/pull/4121) ([girishramnani](https://github.com/girishramnani))\\n- Add warning for default namespace during odo create [\\\\#4092](https://github.com/redhat-developer/odo/pull/4092) ([adisky](https://github.com/adisky))\\n- \\\\[one-liner\\\\] fix wrong format in debug message [\\\\#4061](https://github.com/redhat-developer/odo/pull/4061) ([kadel](https://github.com/kadel))\\n- Update configure-installer-tests-cluster-s390x.sh script to import right imagestream for tests. [\\\\#4054](https://github.com/redhat-developer/odo/pull/4054) ([zhengxiaomei123](https://github.com/zhengxiaomei123))\\n- Show debugger config matching default local port 5858 [\\\\#4039](https://github.com/redhat-developer/odo/pull/4039) ([scottkurz](https://github.com/scottkurz))\\n- Fixing issues with RPMS [\\\\#4025](https://github.com/redhat-developer/odo/pull/4025) ([mohammedzee1000](https://github.com/mohammedzee1000))\\n- Index Doc Update - Volume, Composite Cmd [\\\\#4006](https://github.com/redhat-developer/odo/pull/4006) ([maysunfaisal](https://github.com/maysunfaisal))"},{"id":"odo-200-release","metadata":{"permalink":"/odo-gh-actions/blog/odo-200-release","editUrl":"https://github.com/redhat-developer/odo/edit/main/docs/website/blog/2020-09-24-odo-v2.0.0-ga-release.md","source":"@site/blog/2020-09-24-odo-v2.0.0-ga-release.md","title":"odo 2.0.0 GA Release","description":"2.0.0 of odo has been released!","date":"2020-09-24T00:00:00.000Z","formattedDate":"September 24, 2020","tags":[{"label":"release","permalink":"/odo-gh-actions/blog/tags/release"}],"readingTime":6.195,"truncated":true,"authors":[{"name":"Charlie Drage","url":"https://github.com/cdrage","imageURL":"https://github.com/cdrage.png"}],"frontMatter":{"title":"odo 2.0.0 GA Release","author":"Charlie Drage","author_url":"https://github.com/cdrage","author_image_url":"https://github.com/cdrage.png","tags":["release"],"slug":"odo-200-release"},"prevItem":{"title":"odo 2.0.1 Release","permalink":"/odo-gh-actions/blog/odo-201-release"}},"content":"`2.0.0` of odo has been released!\\n\x3c!--truncate--\x3e\\n\\n### What\'s new\\n\\n#### Changes to the default deployment method\\n\\n[Devfile](https://devfile.github.io/) is a file format that is used as odo\'s new deployment engine. Starting from `2.0.0` onwards, Source-to-Image (S2I) is no longer the default deployment method. S2I is still supported and can now be accessed with the `--s2i` flag from the command-line.\\n\\nLearn how to deploy your first devfile using devfiles from our [Devfile tutorial](/docs/2.5.0/getting-started/quickstart).\\n\\nExample on how to download a starter project and deploy a devfile:\\n\\n```sh\\n$ odo create nodejs --starter\\nValidation\\n \u2713  Checking devfile existence [22411ns]\\n \u2713  Checking devfile compatibility [22492ns]\\n \u2713  Creating a devfile component from registry: DefaultDevfileRegistry [24341ns]\\n \u2713  Validating devfile component [74471ns]\\n\\nStarter Project\\n \u2713  Downloading starter project nodejs-starter from https://github.com/odo-devfiles/nodejs-ex.git [479ms]\\n\\nPlease use `odo push` command to create the component with source deployed\\n\\n$ odo push\\n\\nValidation\\n \u2713  Validating the devfile [132092ns]\\n\\nCreating Kubernetes resources for component nodejs\\n \u2713  Waiting for component to start [5s]\\n\\nApplying URL changes\\n \u2713  URL http-3000: http://http-3000-nodejs-foobar.myproject.example.com/ created\\n\\nSyncing to component nodejs\\n \u2713  Checking files for pushing [1ms]\\n \u2713  Syncing files to the component [868ms]\\n\\nExecuting devfile commands for component nodejs\\n \u2713  Executing install command \\"npm install\\" [4s]\\n \u2713  Executing run command \\"npm start\\" [2s]\\n\\nPushing devfile component nodejs\\n \u2713  Changes successfully pushed to component\\n```\\n\\n#### Deploying a custom Kubernetes controller with odo\\n\\nWith the release of `2.0.0` deploying operators is now out of experimental mode.\\n\\nLearn how to deploy your first Kubernetes custom controller from our [installation guide](/docs/2.5.0/getting-started/cluster-setup/kubernetes).\\n\\nExample on how to deploy your first Operator:\\n\\n```sh\\n$ odo catalog list services\\n  Operators available in the cluster\\n  NAME                          CRDs\\n  etcdoperator.v0.9.4           EtcdCluster, EtcdBackup, EtcdRestore\\n\\n$ odo service create etcdoperator.v0.9.4/EtcdCluster\\n```\\n\\n#### `odo debug` is no longer in technical preview\\n\\nThe `odo debug` command is no longer in technical preview.\\n\\n[Learn how to debug your component via the CLI or VSCode](#).\\n\\n### Full changelog\\n\\n**New features:**\\n\\n- implement odo describe for devfile [\\\\#3644](https://github.com/redhat-developer/odo/issues/3644)\\n- Release 2.0.0 [\\\\#4021](https://github.com/redhat-developer/odo/pull/4021) ([cdrage](https://github.com/cdrage))\\n- Move Operator Hub out of experimental mode [\\\\#3938](https://github.com/redhat-developer/odo/pull/3938) ([dharmit](https://github.com/dharmit))\\n- Implement clonePath, update source code sync location [\\\\#3907](https://github.com/redhat-developer/odo/pull/3907) ([adisky](https://github.com/adisky))\\n\\n**Code Refactoring:**\\n\\n- \\"odo link\\" help message should not check for ClusterServiceVersion support [\\\\#4008](https://github.com/redhat-developer/odo/issues/4008)\\n- API version and schema version tests should be migrated to devfileV2 [\\\\#3794](https://github.com/redhat-developer/odo/issues/3794)\\n- Do not check for CSV when initializing odo link command [\\\\#4010](https://github.com/redhat-developer/odo/pull/4010) ([dharmit](https://github.com/dharmit))\\n- Update odo debug --help screen [\\\\#3963](https://github.com/redhat-developer/odo/pull/3963) ([cdrage](https://github.com/cdrage))\\n- Clarify description of the force-build flag in help text for odo push [\\\\#3958](https://github.com/redhat-developer/odo/pull/3958) ([johnmcollier](https://github.com/johnmcollier))\\n- Switch to use project instead of namespace in env [\\\\#3951](https://github.com/redhat-developer/odo/pull/3951) ([GeekArthur](https://github.com/GeekArthur))\\n- Remove the namespace flag from odo [\\\\#3949](https://github.com/redhat-developer/odo/pull/3949) ([johnmcollier](https://github.com/johnmcollier))\\n- Migrate devfile cmd validation to validate pkg [\\\\#3912](https://github.com/redhat-developer/odo/pull/3912) ([maysunfaisal](https://github.com/maysunfaisal))\\n- Remove command group type init [\\\\#3898](https://github.com/redhat-developer/odo/pull/3898) ([adisky](https://github.com/adisky))\\n\\n**Bugs:**\\n\\n- \\"odo link -h\\" shows same message for 3.x & 4.x clusters [\\\\#3992](https://github.com/redhat-developer/odo/issues/3992)\\n- make goget-tools fails due to go mod dependency [\\\\#3983](https://github.com/redhat-developer/odo/issues/3983)\\n- Handle edge case when index file is commented in .gitignore [\\\\#3961](https://github.com/redhat-developer/odo/issues/3961)\\n- Java component build execution requires pom.xml [\\\\#3943](https://github.com/redhat-developer/odo/issues/3943)\\n- default registry not initialized when user already has a preference.yaml file [\\\\#3940](https://github.com/redhat-developer/odo/issues/3940)\\n- `odo url create` shouldn\'t require a port if only one port exists in the devfile [\\\\#3923](https://github.com/redhat-developer/odo/issues/3923)\\n- `odo push` with alternate --run-command should push complete file set upon new pod creation [\\\\#3918](https://github.com/redhat-developer/odo/issues/3918)\\n- converting s2i items to devfile items does not set the Endpoint\'s name properly [\\\\#3910](https://github.com/redhat-developer/odo/issues/3910)\\n- Unexpected EOF during watch stream event decoding, watch channel was closed. [\\\\#3905](https://github.com/redhat-developer/odo/issues/3905)\\n- odo debug serial tests script panic out [\\\\#3897](https://github.com/redhat-developer/odo/issues/3897)\\n- Default URL does not propagate to `.odo/env/env.yaml` and you cannot delete it. [\\\\#3893](https://github.com/redhat-developer/odo/issues/3893)\\n- Breaking component create without exposing port [\\\\#3882](https://github.com/redhat-developer/odo/issues/3882)\\n- odo registry list causes panic if preference has not been setup [\\\\#3842](https://github.com/redhat-developer/odo/issues/3842)\\n- odo watch goes into infinite push loop if ignore flag is used [\\\\#3819](https://github.com/redhat-developer/odo/issues/3819)\\n- \'odo create\' should properly validate devfiles [\\\\#3778](https://github.com/redhat-developer/odo/issues/3778)\\n- context flag does not work with devfile url create [\\\\#3767](https://github.com/redhat-developer/odo/issues/3767)\\n- odo log is unusable for multi container components [\\\\#3711](https://github.com/redhat-developer/odo/issues/3711)\\n- \\"odo registry add\\" adds registry for invalid url in devfileV2 [\\\\#3451](https://github.com/redhat-developer/odo/issues/3451)\\n- Prints help message based on backend cluster [\\\\#3993](https://github.com/redhat-developer/odo/pull/3993) ([dharmit](https://github.com/dharmit))\\n- s2i component fix: use Config instead of ContainerConfig for port detection [\\\\#3957](https://github.com/redhat-developer/odo/pull/3957) ([kadel](https://github.com/kadel))\\n- 3923- url creation with optional port flag [\\\\#3950](https://github.com/redhat-developer/odo/pull/3950) ([yangcao77](https://github.com/yangcao77))\\n- Add mandatory file ignores when using --ignore flag [\\\\#3942](https://github.com/redhat-developer/odo/pull/3942) ([maysunfaisal](https://github.com/maysunfaisal))\\n- Fix default registry support [\\\\#3941](https://github.com/redhat-developer/odo/pull/3941) ([GeekArthur](https://github.com/GeekArthur))\\n- Update s2i image from library for ppc64le [\\\\#3939](https://github.com/redhat-developer/odo/pull/3939) ([sarveshtamba](https://github.com/sarveshtamba))\\n- update s2i to devfile conversion as per new url design [\\\\#3930](https://github.com/redhat-developer/odo/pull/3930) ([adisky](https://github.com/adisky))\\n- Add test-case for validating devfiles on component create [\\\\#3908](https://github.com/redhat-developer/odo/pull/3908) ([johnmcollier](https://github.com/johnmcollier))\\n- Improve URL format validation [\\\\#3900](https://github.com/redhat-developer/odo/pull/3900) ([GeekArthur](https://github.com/GeekArthur))\\n- implement odo describe for devfile [\\\\#3843](https://github.com/redhat-developer/odo/pull/3843) ([metacosm](https://github.com/metacosm))\\n\\n**Tests:**\\n\\n- Test failures while running `test-cmd-push` test suite on ppc64le [\\\\#3539](https://github.com/redhat-developer/odo/issues/3539)\\n- Test failures while running `test-cmd-storage` test suite on ppc64le [\\\\#3531](https://github.com/redhat-developer/odo/issues/3531)\\n\\n**Documentation & Discussions:**\\n\\n- Update installation page to include instructions for VSCode / IDE\'s [\\\\#3970](https://github.com/redhat-developer/odo/issues/3970)\\n- Update docs according to schema changes in the command and component struct [\\\\#3925](https://github.com/redhat-developer/odo/issues/3925)\\n- Help for `odo push -f` should explain that the full set of project source is pushed to the container [\\\\#3919](https://github.com/redhat-developer/odo/issues/3919)\\n- Make the `odo.dev` front page documentation simpler [\\\\#3887](https://github.com/redhat-developer/odo/issues/3887)\\n- Add debug examples for \\"odo debug -h\\" [\\\\#3871](https://github.com/redhat-developer/odo/issues/3871)\\n- Remove technology preview feature for debug command [\\\\#3869](https://github.com/redhat-developer/odo/issues/3869)\\n- Update devfile \\"odo.dev\\" doc [\\\\#3868](https://github.com/redhat-developer/odo/issues/3868)\\n- Documentation for Operator Hub integration in v2 [\\\\#3810](https://github.com/redhat-developer/odo/issues/3810)\\n- Document on converting s2i to devfile [\\\\#3749](https://github.com/redhat-developer/odo/issues/3749)\\n- Adds a blog folder [\\\\#4003](https://github.com/redhat-developer/odo/pull/4003) ([cdrage](https://github.com/cdrage))\\n- Document odo and Operator Hub integration [\\\\#3982](https://github.com/redhat-developer/odo/pull/3982) ([dharmit](https://github.com/dharmit))\\n- Add instructions on how to install VSCode plugin [\\\\#3977](https://github.com/redhat-developer/odo/pull/3977) ([cdrage](https://github.com/cdrage))\\n- Update installation page to indicate beta-1 [\\\\#3960](https://github.com/redhat-developer/odo/pull/3960) ([cdrage](https://github.com/cdrage))\\n- Remove references to Docker support [\\\\#3954](https://github.com/redhat-developer/odo/pull/3954) ([cdrage](https://github.com/cdrage))\\n- Updates docs to use the new schema changes for commands and components [\\\\#3928](https://github.com/redhat-developer/odo/pull/3928) ([mik-dass](https://github.com/mik-dass))\\n- Update commands ouputs in docs. [\\\\#3927](https://github.com/redhat-developer/odo/pull/3927) ([boczkowska](https://github.com/boczkowska))\\n\\n**Closed issues:**\\n\\n- Determine if we want to keep Docker support in experimental mode, or disable it [\\\\#3955](https://github.com/redhat-developer/odo/issues/3955)\\n- rename --namespace flag in odo push to --project [\\\\#3948](https://github.com/redhat-developer/odo/issues/3948)\\n- rename odo env variable namespace to project [\\\\#3947](https://github.com/redhat-developer/odo/issues/3947)\\n- Test failures while running `test-integration`  and `test-e2e-all` test suite on ppc64le [\\\\#3945](https://github.com/redhat-developer/odo/issues/3945)\\n- \\"unknown flag: --s2i\\" while running odo test suite \'test-generic\' on ppc64le [\\\\#3934](https://github.com/redhat-developer/odo/issues/3934)\\n- odo `make` commands fail on ppc64le after latest changes. [\\\\#3891](https://github.com/redhat-developer/odo/issues/3891)\\n- Downstream release of the odo cli [\\\\#3852](https://github.com/redhat-developer/odo/issues/3852)\\n- clonePath should be supported in odo [\\\\#3729](https://github.com/redhat-developer/odo/issues/3729)\\n- Move devfile command validation to validate pkg [\\\\#3703](https://github.com/redhat-developer/odo/issues/3703)\\n- `make test` throws \\"Errorf format %w has unknown verb w\\" error on ppc64le with latest master [\\\\#3607](https://github.com/redhat-developer/odo/issues/3607)\\n- Move Operator Hub integration out of Experimental mode [\\\\#3595](https://github.com/redhat-developer/odo/issues/3595)\\n- Move container image used in springboot devfile to some odo owned image repository [\\\\#3578](https://github.com/redhat-developer/odo/issues/3578)\\n- Move the devfile feature set out of the experimental mode [\\\\#3550](https://github.com/redhat-developer/odo/issues/3550)\\n- JSON  / machine output support for Devfile Components [\\\\#3521](https://github.com/redhat-developer/odo/issues/3521)\\n- Component push throws error of \\"Waiting for component to start\\" on ppc64le [\\\\#3497](https://github.com/redhat-developer/odo/issues/3497)\\n- odo project create throws error of connection refused on ppc64le [\\\\#3491](https://github.com/redhat-developer/odo/issues/3491)\\n- Tests for devfiles in odo devfile registry [\\\\#3378](https://github.com/redhat-developer/odo/issues/3378)\\n\\n**Merged pull requests:**\\n\\n- vendor: switch location of goautoneg to github [\\\\#3984](https://github.com/redhat-developer/odo/pull/3984) ([kadel](https://github.com/kadel))\\n- Remove url describe command [\\\\#3981](https://github.com/redhat-developer/odo/pull/3981) ([adisky](https://github.com/adisky))\\n- odo list follow up implementation [\\\\#3964](https://github.com/redhat-developer/odo/pull/3964) ([girishramnani](https://github.com/girishramnani))\\n- Fix test failure caused by updating springboot devfile [\\\\#3946](https://github.com/redhat-developer/odo/pull/3946) ([adisky](https://github.com/adisky))\\n- apiVersion test migrated to devfileV2 [\\\\#3920](https://github.com/redhat-developer/odo/pull/3920) ([anandrkskd](https://github.com/anandrkskd))\\n- add test for odo url create --context flag [\\\\#3917](https://github.com/redhat-developer/odo/pull/3917) ([girishramnani](https://github.com/girishramnani))\\n- Update springboot devfile [\\\\#3799](https://github.com/redhat-developer/odo/pull/3799) ([adisky](https://github.com/adisky))\\n- Fix odo log for multi containers devfile [\\\\#3735](https://github.com/redhat-developer/odo/pull/3735) ([adisky](https://github.com/adisky))\\n- Make Devfile the default deployment mechanism [\\\\#3705](https://github.com/redhat-developer/odo/pull/3705) ([cdrage](https://github.com/cdrage))"}]}')}}]);