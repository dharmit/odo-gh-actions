"use strict";(self.webpackChunkodo_dev=self.webpackChunkodo_dev||[]).push([[1932],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>u});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),d=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},m=function(e){var t=d(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},s=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),s=d(n),u=i,f=s["".concat(c,".").concat(u)]||s[u]||p[u]||o;return n?r.createElement(f,a(a({ref:t},m),{},{components:n})):r.createElement(f,a({ref:t},m))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=s;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var d=2;d<o;d++)a[d]=n[d];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}s.displayName="MDXCreateElement"},4952:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var r=n(3117),i=(n(7294),n(3905));const o={title:"odo build-images"},a=void 0,l={unversionedId:"command-reference/build-images",id:"command-reference/build-images",title:"odo build-images",description:"odo can build container images based on Dockerfiles, and push these images to their registries.",source:"@site/docs/command-reference/build-images.md",sourceDirName:"command-reference",slug:"/command-reference/build-images",permalink:"/docs/command-reference/build-images",editUrl:"https://github.com/redhat-developer/odo/edit/main/docs/website/docs/command-reference/build-images.md",tags:[],version:"current",frontMatter:{title:"odo build-images"},sidebar:"tutorialSidebar",previous:{title:"odo add binding",permalink:"/docs/command-reference/add-binding"},next:{title:"odo completion",permalink:"/docs/command-reference/completion"}},c={},d=[],m={toc:d};function p(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"odo can build container images based on Dockerfiles, and push these images to their registries."),(0,i.kt)("p",null,"When running the command ",(0,i.kt)("inlineCode",{parentName:"p"},"odo build-images"),", odo searches for all components in the ",(0,i.kt)("inlineCode",{parentName:"p"},"devfile.yaml")," with the ",(0,i.kt)("inlineCode",{parentName:"p"},"image")," type, for example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"components:\n- image:\n    imageName: quay.io/myusername/myimage\n    dockerfile:\n      uri: ./Dockerfile\n      buildContext: ${PROJECTS_ROOT}\n  name: component-built-from-dockerfile\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"uri")," field indicates the relative path of the Dockerfile to use, relative to the directory containing the ",(0,i.kt)("inlineCode",{parentName:"p"},"devfile.yaml"),".\nAs indicated in the Devfile specification, ",(0,i.kt)("inlineCode",{parentName:"p"},"uri")," could also be an HTTP or HTTPS URL."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"buildContext")," indicates the directory used as build context. The default value is ",(0,i.kt)("inlineCode",{parentName:"p"},"${PROJECT_SOURCE}"),"."),(0,i.kt)("p",null,"For each image component, odo executes either ",(0,i.kt)("inlineCode",{parentName:"p"},"podman")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"docker")," (the first one found, in this order), to build the image with the specified Dockerfile, build context and arguments."),(0,i.kt)("p",null,"If the ",(0,i.kt)("inlineCode",{parentName:"p"},"--push")," flag is passed to the command, the images will be pushed to their registries after they are built."))}p.isMDXComponent=!0}}]);