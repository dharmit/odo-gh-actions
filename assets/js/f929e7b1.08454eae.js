"use strict";(self.webpackChunkodo_dev=self.webpackChunkodo_dev||[]).push([[7592],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>u});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},d=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),c=p(t),u=o,g=c["".concat(l,".").concat(u)]||c[u]||m[u]||i;return t?a.createElement(g,s(s({ref:n},d),{},{components:t})):a.createElement(g,s({ref:n},d))}));function u(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,s=new Array(i);s[0]=c;var r={};for(var l in n)hasOwnProperty.call(n,l)&&(r[l]=n[l]);r.originalType=e,r.mdxType="string"==typeof e?e:o,s[1]=r;for(var p=2;p<i;p++)s[p]=t[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},6303:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>r,toc:()=>p});var a=t(3117),o=(t(7294),t(3905));const i={title:"JSON Output",sidebar_position:1},s=void 0,r={unversionedId:"command-reference/json-output",id:"command-reference/json-output",title:"JSON Output",description:"For odo to be used as a backend by graphical user interfaces (GUIs),",source:"@site/docs/command-reference/json-output.md",sourceDirName:"command-reference",slug:"/command-reference/json-output",permalink:"/docs/command-reference/json-output",editUrl:"https://github.com/redhat-developer/odo/edit/main/docs/website/docs/command-reference/json-output.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"JSON Output",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Using Devfile Lifecycle Events",permalink:"/docs/user-guides/advanced/using-devfile-lifecycle-events"},next:{title:"odo add binding",permalink:"/docs/command-reference/add-binding"}},l={},p=[{value:"odo analyze -o json",id:"odo-analyze--o-json",level:2},{value:"odo init -o json",id:"odo-init--o-json",level:2},{value:"odo describe component -o json",id:"odo-describe-component--o-json",level:2},{value:"odo list -o json",id:"odo-list--o-json",level:2},{value:"odo registry -o json",id:"odo-registry--o-json",level:2},{value:"odo list binding -o json",id:"odo-list-binding--o-json",level:2},{value:"Examples",id:"examples",level:3},{value:"odo describe binding -o json",id:"odo-describe-binding--o-json",level:2}],d={toc:p};function m(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"For ",(0,o.kt)("inlineCode",{parentName:"p"},"odo")," to be used as a backend by graphical user interfaces (GUIs),\nthe useful commands can output their result in JSON format."),(0,o.kt)("p",null,"When used with the ",(0,o.kt)("inlineCode",{parentName:"p"},"-o json")," flags, a command:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"that terminates successully, will:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"terminate with a zero exit status,"),(0,o.kt)("li",{parentName:"ul"},"will return its result in JSON format in its standard output stream."))),(0,o.kt)("li",{parentName:"ul"},"that terminates with an error, will:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"terminate with a non-zero exit status,"),(0,o.kt)("li",{parentName:"ul"},"will return an error message in its standard error stream, in the unique field ",(0,o.kt)("inlineCode",{parentName:"li"},"message")," of a JSON object, as in ",(0,o.kt)("inlineCode",{parentName:"li"},'{ "message": "file not found" }'))))),(0,o.kt)("p",null,"The structures used to return information using JSON output are defined in ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/redhat-developer/odo/tree/main/pkg/api"},"the ",(0,o.kt)("inlineCode",{parentName:"a"},"pkg/api")," package"),"."),(0,o.kt)("h2",{id:"odo-analyze--o-json"},"odo analyze -o json"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"analyze")," command analyzes the files in the current directory to select the best devfiles to use,\nfrom the devfiles in the registries defined in the list of preferred registries with the command ",(0,o.kt)("inlineCode",{parentName:"p"},"odo preference view"),"."),(0,o.kt)("p",null,"The output of this command contains a list of devfile name and registry name:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"odo analyze -o json\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'[\n    {\n        "devfile": "nodejs",\n        "devfileRegistry": "DefaultDevfileRegistry"\n    }\n]\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"echo $?\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"0\n")),(0,o.kt)("p",null,"If the command is executed in an empty directory, it will return an error in the standard error stream and terminate with a non-zero exit status:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"odo analyze -o json\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "message": "No valid devfile found for project in /home/user/my/empty/directory"\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"echo $?\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"1\n")),(0,o.kt)("h2",{id:"odo-init--o-json"},"odo init -o json"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"init")," command downloads a devfile and, optionally, a starter project. The usage for this command can be found in the ",(0,o.kt)("a",{parentName:"p",href:"/docs/command-reference/init"},"odo init command reference page"),"."),(0,o.kt)("p",null,"The output of this command contains the path of the downloaded devfile and its content, in JSON format."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ odo init -o json \\\n    --name aname \\\n    --devfile go \\\n    --starter go-starter\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "devfilePath": "/home/user/my-project/devfile.yaml",\n    "devfileData": {\n        "devfile": {\n            "schemaVersion": "2.1.0",\n      [...]\n        },\n        "supportedOdoFeatures": {\n            "dev": true,\n            "deploy": false,\n            "debug": false\n        }\n    },\n    "forwardedPorts": [],\n    "runningIn": [],\n    "managedBy": "odo"\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"echo $?\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"0\n")),(0,o.kt)("p",null,"If the command fails, it will return an error in the standard error stream and terminate with a non-zero exit status:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# Executing the same command again will fail\n$ odo init -o json \\\n    --name aname \\\n    --devfile go \\\n    --starter go-starter\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "message": "a devfile already exists in the current directory"\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"echo $?\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"1\n")),(0,o.kt)("h2",{id:"odo-describe-component--o-json"},"odo describe component -o json"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"describe component")," command returns information about a component, either the component\ndefined by a Devfile in the current directory, or a deployed component given its name and namespace."),(0,o.kt)("p",null,"When the ",(0,o.kt)("inlineCode",{parentName:"p"},"describe component")," command is executed without parameter from a directory containing a Devfile, it will return:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"information about the Devfile",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"the path of the Devfile,"),(0,o.kt)("li",{parentName:"ul"},"the content of the Devfile,"),(0,o.kt)("li",{parentName:"ul"},"supported ",(0,o.kt)("inlineCode",{parentName:"li"},"odo")," features, indicating if the Devfile defines necessary information to run ",(0,o.kt)("inlineCode",{parentName:"li"},"odo dev"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"odo dev --debug")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"odo deploy")))),(0,o.kt)("li",{parentName:"ul"},"the status of the component",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"the forwarded ports if odo is currently running in Dev mode,"),(0,o.kt)("li",{parentName:"ul"},"the modes in which the component is deployed (either none, Dev, Deploy or both)")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"odo describe component -o json\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "devfilePath": "/home/phmartin/Documents/tests/tmp/devfile.yaml",\n    "devfileData": {\n        "devfile": {\n            "schemaVersion": "2.0.0",\n            [ devfile.yaml file content ]\n        },\n        "supportedOdoFeatures": {\n            "dev": true,\n            "deploy": false,\n            "debug": true\n        }\n    },\n    "devForwardedPorts": [\n        {\n            "containerName": "runtime",\n            "localAddress": "127.0.0.1",\n            "localPort": 40001,\n            "containerPort": 3000\n        }\n    ],\n    "runningIn": ["Dev"],\n    "managedBy": "odo"\n}\n')),(0,o.kt)("p",null,"When the ",(0,o.kt)("inlineCode",{parentName:"p"},"describe component")," commmand is executed with a name and namespace, it will return:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"the modes in which the component is deployed (either Dev, Deploy or both)")),(0,o.kt)("p",null,"The command with name and namespace is not able to return information about a component that has not been deployed. "),(0,o.kt)("p",null,"The command with name and namespace will never return information about the Devfile, even if a Devfile is present in the current directory."),(0,o.kt)("p",null,"The command with name and namespace will never return information about the forwarded ports, as the information resides in the directory of the Devfile."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"odo describe component --name aname -o json\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "runningIn": ["Dev"],\n    "managedBy": "odo"\n}\n')),(0,o.kt)("h2",{id:"odo-list--o-json"},"odo list -o json"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"odo list")," command returns information about components running on a specific namespace, and defined in the local Devfile, if any."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"components")," field lists the components either deployed in the cluster, or defined in the local Devfile."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"componentInDevfile")," field gives the name of the component present in the ",(0,o.kt)("inlineCode",{parentName:"p"},"components")," list that is defined in the local Devfile, or is empty if no local Devfile is present."),(0,o.kt)("p",null,"In this example, the ",(0,o.kt)("inlineCode",{parentName:"p"},"component2")," component is running in Deploy mode, and the command has been executed from a directory containing a Devfile defining a ",(0,o.kt)("inlineCode",{parentName:"p"},"component1")," component, not running."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"odo list --namespace project1\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "componentInDevfile": "component1",\n    "components": [\n        {\n            "name": "component2",\n            "managedBy": "odo",\n            "runningIn": [\n                "Deploy"\n            ],\n            "projectType": "nodejs"\n        },\n        {\n            "name": "component1",\n            "managedBy": "",\n            "runningIn": [],\n            "projectType": "nodejs"\n        }\n    ]\n}\n')),(0,o.kt)("h2",{id:"odo-registry--o-json"},"odo registry -o json"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"odo registry")," command lists all the Devfile stacks from Devfile registries. You can get the available flag in the ",(0,o.kt)("a",{parentName:"p",href:"/docs/command-reference/registry"},"registry command reference"),"."),(0,o.kt)("p",null,"The default output will return information found into the registry index for stacks:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"odo registry -o json\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'[\n    {\n        "name": "python-django",\n        "displayName": "Django",\n        "description": "Python3.7 with Django",\n        "registry": {\n            "name": "DefaultDevfileRegistry",\n            "url": "https://registry.devfile.io",\n            "secure": false\n        },\n        "language": "python",\n        "tags": [\n            "Python",\n            "pip",\n            "Django"\n        ],\n        "projectType": "django",\n        "version": "1.0.0",\n        "starterProjects": [\n            "django-example"\n        ]\n    }, [...]\n]\n')),(0,o.kt)("p",null,"Using the ",(0,o.kt)("inlineCode",{parentName:"p"},"--details")," flag, you will also get information about the Devfile:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"odo registry --details -o json\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'[\n    {\n        "name": "python-django",\n        "displayName": "Django",\n        "description": "Python3.7 with Django",\n        "registry": {\n            "name": "DefaultDevfileRegistry",\n            "url": "https://registry.devfile.io",\n            "secure": false\n        },\n        "language": "python",\n        "tags": [\n            "Python",\n            "pip",\n            "Django"\n        ],\n        "projectType": "django",\n        "version": "1.0.0",\n        "starterProjects": [\n            "django-example"\n        ],\n        "devfileData": {\n            "devfile": {\n                "schemaVersion": "2.0.0",\n                [ devfile.yaml file content ]\n            },\n            "supportedOdoFeatures": {\n                "dev": true,\n                "deploy": false,\n                "debug": true\n            }\n        },\n    }, [...]\n]\n')),(0,o.kt)("h2",{id:"odo-list-binding--o-json"},"odo list binding -o json"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"odo list binding")," command lists all service binding resources deployed in the current namespace,\nand all service binding resources declared in the Devfile, if executed from a component directory."),(0,o.kt)("p",null,"The names of the Service Binding resources declared in the current Devfile are listed in the ",(0,o.kt)("inlineCode",{parentName:"p"},"bindingsInDevfile"),"\nfield of the output."),(0,o.kt)("p",null,"If a Service Binding resource is found in the current namespace, it also displays the variables that can be used from\nthe component in the ",(0,o.kt)("inlineCode",{parentName:"p"},"status.bindingFiles")," and/or ",(0,o.kt)("inlineCode",{parentName:"p"},"status.bindingEnvVars")," fields."),(0,o.kt)("h3",{id:"examples"},"Examples"),(0,o.kt)("p",null,"When a service binding resource is defined in the Devfile, and the component is not deployed, you get an output similar to:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"odo list binding -o json\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "bindingsInDevfile": [\n        "my-nodejs-app-cluster-sample"\n    ],\n    "bindings": [\n        {\n            "name": "my-nodejs-app-cluster-sample",\n            "spec": {\n                "application": {\n                    "kind": "Deployment",\n                    "name": "my-nodejs-app-app",\n                    "apiVersion": "apps/v1"\n                },\n                "services": [\n                    {\n                        "kind": "Cluster",\n                        "name": "cluster-sample",\n                        "apiVersion": "postgresql.k8s.enterprisedb.io/v1"\n                    }\n                ],\n                "detectBindingResources": true,\n                "bindAsFiles": true\n            }\n        }\n    ]\n}\n\nWith the same Devfile, when `odo dev` is running, you get an output similar to\n(note the `.bindings[*].status` field):\n\n\n```shell\nodo list binding -o json\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "bindingsInDevfile": [\n        "my-nodejs-app-cluster-sample"\n    ],\n    "bindings": [\n        {\n            "name": "my-nodejs-app-cluster-sample",\n            "spec": {\n                "application": {\n                    "kind": "Deployment",\n                    "name": "my-nodejs-app-app",\n                    "apiVersion": "apps/v1"\n                },\n                "services": [\n                    {\n                        "kind": "Cluster",\n                        "name": "cluster-sample",\n                        "apiVersion": "postgresql.k8s.enterprisedb.io/v1"\n                    }\n                ],\n                "detectBindingResources": true,\n                "bindAsFiles": true\n            },\n            "status": {\n                "bindingFiles": [\n                    "${SERVICE_BINDING_ROOT}/my-nodejs-app-cluster-sample/database",\n                    "${SERVICE_BINDING_ROOT}/my-nodejs-app-cluster-sample/host",\n                    "${SERVICE_BINDING_ROOT}/my-nodejs-app-cluster-sample/pgpass",\n                    "${SERVICE_BINDING_ROOT}/my-nodejs-app-cluster-sample/provider",\n                    "${SERVICE_BINDING_ROOT}/my-nodejs-app-cluster-sample/type",\n                    "${SERVICE_BINDING_ROOT}/my-nodejs-app-cluster-sample/username",\n                    "${SERVICE_BINDING_ROOT}/my-nodejs-app-cluster-sample/ca.crt",\n                    "${SERVICE_BINDING_ROOT}/my-nodejs-app-cluster-sample/ca.key",\n                    "${SERVICE_BINDING_ROOT}/my-nodejs-app-cluster-sample/clusterIP",\n                    "${SERVICE_BINDING_ROOT}/my-nodejs-app-cluster-sample/password",\n                    "${SERVICE_BINDING_ROOT}/my-nodejs-app-cluster-sample/tls.crt",\n                    "${SERVICE_BINDING_ROOT}/my-nodejs-app-cluster-sample/tls.key"\n                ],\n                "runningIn": [\n                    "Dev"\n                ]\n            }\n        }\n    ]\n}\n')),(0,o.kt)("p",null,"When ",(0,o.kt)("inlineCode",{parentName:"p"},"odo dev")," is running, if you execute the command from a directory without Devfile,\nyou get an output similar to (note that the ",(0,o.kt)("inlineCode",{parentName:"p"},".bindingsInDevfile")," field is not present anymore):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"odo list binding -o json\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "bindings": [\n        {\n            "name": "my-nodejs-app-cluster-sample",\n            "spec": {\n                "application": {\n                    "kind": "Deployment",\n                    "name": "my-nodejs-app-app",\n                    "apiVersion": "apps/v1"\n                },\n                "services": [\n                    {\n                        "kind": "Cluster",\n                        "name": "cluster-sample",\n                        "apiVersion": "postgresql.k8s.enterprisedb.io/v1"\n                    }\n                ],\n                "detectBindingResources": true,\n                "bindAsFiles": true\n            },\n            "status": {\n                "bindingFiles": [\n                    "${SERVICE_BINDING_ROOT}/my-nodejs-app-cluster-sample/database",\n                    "${SERVICE_BINDING_ROOT}/my-nodejs-app-cluster-sample/host",\n                    "${SERVICE_BINDING_ROOT}/my-nodejs-app-cluster-sample/pgpass",\n                    "${SERVICE_BINDING_ROOT}/my-nodejs-app-cluster-sample/provider",\n                    "${SERVICE_BINDING_ROOT}/my-nodejs-app-cluster-sample/type",\n                    "${SERVICE_BINDING_ROOT}/my-nodejs-app-cluster-sample/username",\n                    "${SERVICE_BINDING_ROOT}/my-nodejs-app-cluster-sample/ca.crt",\n                    "${SERVICE_BINDING_ROOT}/my-nodejs-app-cluster-sample/ca.key",\n                    "${SERVICE_BINDING_ROOT}/my-nodejs-app-cluster-sample/clusterIP",\n                    "${SERVICE_BINDING_ROOT}/my-nodejs-app-cluster-sample/password",\n                    "${SERVICE_BINDING_ROOT}/my-nodejs-app-cluster-sample/tls.crt",\n                    "${SERVICE_BINDING_ROOT}/my-nodejs-app-cluster-sample/tls.key"\n                ],\n                "runningIn": [\n                    "Dev"\n                ]\n            }\n        }\n    ]\n}\n')),(0,o.kt)("h2",{id:"odo-describe-binding--o-json"},"odo describe binding -o json"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"odo describe binding")," command lists all the service binding resources declared in the devfile\nand, if the resource is deployed to the cluster, also displays the variables that can be used from\nthe component."),(0,o.kt)("p",null,"If a name is given, the command does not extract information from the Devfile, but instead extracts\ninformation from the deployed resource with the given name."),(0,o.kt)("p",null,"Without a name, the output of the command is a list of service binding details, for example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"odo describe binding -o json\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'[\n    {\n        "name": "my-first-binding",\n        "spec": {\n            "application": {\n                "kind": "Deployment",\n                "name": "my-nodejs-app-app",\n                "apiVersion": "apps/v1"\n            },\n            "services": [\n                {\n                    "apiVersion": "postgresql.k8s.enterprisedb.io/v1",\n                    "kind": "Cluster",\n                    "name": "cluster-sample",\n                    "namespace": "shared-services-ns"\n                }\n            ],\n            "detectBindingResources": false,\n            "bindAsFiles": true,\n            "namingStrategy": "lowercase"\n        },\n        "status": {\n            "bindingFiles": [\n                "${SERVICE_BINDING_ROOT}/my-first-binding/host",\n                "${SERVICE_BINDING_ROOT}/my-first-binding/password",\n                "${SERVICE_BINDING_ROOT}/my-first-binding/pgpass",\n                "${SERVICE_BINDING_ROOT}/my-first-binding/provider",\n                "${SERVICE_BINDING_ROOT}/my-first-binding/type",\n                "${SERVICE_BINDING_ROOT}/my-first-binding/username",\n                "${SERVICE_BINDING_ROOT}/my-first-binding/database"\n            ],\n            "bindingEnvVars": [\n                "PASSWD"\n            ]\n        }\n    },\n    {\n        "name": "my-second-binding",\n        "spec": {\n            "application": {\n                "kind": "Deployment",\n                "name": "my-nodejs-app-app",\n                "apiVersion": "apps/v1"\n            },\n            "services": [\n                {\n                    "apiVersion": "postgresql.k8s.enterprisedb.io/v1",\n                    "kind": "Cluster",\n                    "name": "cluster-sample-2"\n                }\n            ],\n            "detectBindingResources": true,\n            "bindAsFiles": true\n        },\n        "status": {\n            "bindingFiles": [\n                "${SERVICE_BINDING_ROOT}/my-second-binding/ca.crt",\n                "${SERVICE_BINDING_ROOT}/my-second-binding/clusterIP",\n                "${SERVICE_BINDING_ROOT}/my-second-binding/database",\n                "${SERVICE_BINDING_ROOT}/my-second-binding/host",\n                "${SERVICE_BINDING_ROOT}/my-second-binding/ca.key",\n                "${SERVICE_BINDING_ROOT}/my-second-binding/password",\n                "${SERVICE_BINDING_ROOT}/my-second-binding/pgpass",\n                "${SERVICE_BINDING_ROOT}/my-second-binding/provider",\n                "${SERVICE_BINDING_ROOT}/my-second-binding/tls.crt",\n                "${SERVICE_BINDING_ROOT}/my-second-binding/tls.key",\n                "${SERVICE_BINDING_ROOT}/my-second-binding/type",\n                "${SERVICE_BINDING_ROOT}/my-second-binding/username"\n            ]\n        }\n    }\n]\n')),(0,o.kt)("p",null,"When specifying a name, the output is a unique service binding:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"odo describe binding --name my-first-binding -o json\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "name": "my-first-binding",\n    "spec": {\n            "application": {\n                "kind": "Deployment",\n                "name": "my-nodejs-app-app",\n                "apiVersion": "apps/v1"\n            },\n        "services": [\n            {\n                "apiVersion": "postgresql.k8s.enterprisedb.io/v1",\n                "kind": "Cluster",\n                "name": "cluster-sample",\n                "namespace": "shared-services-ns"\n            }\n        ],\n        "detectBindingResources": false,\n        "bindAsFiles": true\n    },\n    "status": {\n        "bindingFiles": [\n            "${SERVICE_BINDING_ROOT}/my-first-binding/host",\n            "${SERVICE_BINDING_ROOT}/my-first-binding/password",\n            "${SERVICE_BINDING_ROOT}/my-first-binding/pgpass",\n            "${SERVICE_BINDING_ROOT}/my-first-binding/provider",\n            "${SERVICE_BINDING_ROOT}/my-first-binding/type",\n            "${SERVICE_BINDING_ROOT}/my-first-binding/username",\n            "${SERVICE_BINDING_ROOT}/my-first-binding/database"\n        ],\n        "bindingEnvVars": [\n            "PASSWD"\n        ]\n    }\n}\n')))}m.isMDXComponent=!0}}]);