"use strict";(self.webpackChunkodo_dev=self.webpackChunkodo_dev||[]).push([[1444],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=d(n),m=o,h=u["".concat(s,".").concat(m)]||u[m]||c[m]||i;return n?a.createElement(h,r(r({ref:t},p),{},{components:n})):a.createElement(h,r({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,r[1]=l;for(var d=2;d<i;d++)r[d]=n[d];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6744:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var a=n(3117),o=(n(7294),n(3905));const i={title:"Binding to a database service without the Service Binding Operator",author:"Parthvi Vala",author_url:"https://github.com/valaparthvi",author_image_url:"https://github.com/valaparthvi.png",tags:["binding"],slug:"binding-database-service-without-sbo"},r=void 0,l={permalink:"/odo-gh-actions/blog/binding-database-service-without-sbo",editUrl:"https://github.com/redhat-developer/odo/edit/main/docs/website/blog/2022-06-30-binding-database-service-without-sbo.md",source:"@site/blog/2022-06-30-binding-database-service-without-sbo.md",title:"Binding to a database service without the Service Binding Operator",description:"How to bind your application to a database service without the Service Binding Operator.",date:"2022-06-30T00:00:00.000Z",formattedDate:"June 30, 2022",tags:[{label:"binding",permalink:"/odo-gh-actions/blog/tags/binding"}],readingTime:7.165,truncated:!0,authors:[{name:"Parthvi Vala",url:"https://github.com/valaparthvi",imageURL:"https://github.com/valaparthvi.png"}],frontMatter:{title:"Binding to a database service without the Service Binding Operator",author:"Parthvi Vala",author_url:"https://github.com/valaparthvi",author_image_url:"https://github.com/valaparthvi.png",tags:["binding"],slug:"binding-database-service-without-sbo"},prevItem:{title:"odo v3.0.0-beta1 Released",permalink:"/odo-gh-actions/blog/odo-v3-beta1-release"},nextItem:{title:"Binding an external service with odo v3",permalink:"/odo-gh-actions/blog/binding-external-service-with-odo-v3"}},s={authorsImageUrls:[void 0]},d=[{value:"Architecture",id:"architecture",level:2},{value:"Prerequisites:",id:"prerequisites",level:2},{value:"(Optional) Setting up the namespace",id:"optional-setting-up-the-namespace",level:2},{value:"Setting up the MongoDB microservice",id:"setting-up-the-mongodb-microservice",level:2},{value:"Setting up the application",id:"setting-up-the-application",level:2},{value:"Download the devfile.yaml",id:"download-the-devfileyaml",level:2},{value:"Adding the connection information to devfile.yaml",id:"adding-the-connection-information-to-devfileyaml",level:2},{value:"Deploy the application",id:"deploy-the-application",level:2},{value:"Accessing the application",id:"accessing-the-application",level:2},{value:"List of available API endpoints",id:"list-of-available-api-endpoints",level:3},{value:"Conclusion",id:"conclusion",level:2},{value:"Related articles on binding:",id:"related-articles-on-binding",level:3}],p={toc:d};function c(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"How to bind your application to a database service without the Service Binding Operator."),(0,o.kt)("p",null,"There are a few ways of binding your application to a database service with the help of odo. The recommended way is with the help of Service Binding Operator(SBO), but it is also possible to bind without it, and this blog will show you how."),(0,o.kt)("h2",{id:"architecture"},"Architecture"),(0,o.kt)("p",null,"We have a simple CRUD application built in Go that can create/list/update/delete a place. This application requires connecting to a MongoDB database in order to function correctly, which will be deployed as a microservice on the cluster."),(0,o.kt)("h2",{id:"prerequisites"},"Prerequisites:"),(0,o.kt)("p",null,"This blog assumes:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/redhat-developer/odo/releases/tag/v3.0.0-beta1"},"odo v3.0.0-beta1")),(0,o.kt)("li",{parentName:"ul"},"you have access to a Kubernetes or OpenShift cluster."),(0,o.kt)("li",{parentName:"ul"},"you have ",(0,o.kt)("em",{parentName:"li"},"Helm")," installed on your system. See ",(0,o.kt)("a",{parentName:"li",href:"https://helm.sh/docs/intro/install/"},"https://helm.sh/docs/intro/install/")," for installation instructions.")),(0,o.kt)("h2",{id:"optional-setting-up-the-namespace"},"(Optional) Setting up the namespace"),(0,o.kt)("ol",{start:0},(0,o.kt)("li",{parentName:"ol"},"We will create a new namespace to deploy our application in, with the help of odo.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"odo create namespace restapi-mongodb\n")),(0,o.kt)("h2",{id:"setting-up-the-mongodb-microservice"},"Setting up the MongoDB microservice"),(0,o.kt)("p",null,"We are going to use the Bitnami's helm charts for creating our MongoDB database."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Add the Bitnami's Helm charts repository and make your Helm client up to date with it:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"helm repo add bitnami https://charts.bitnami.com/bitnami && helm repo update\n")),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"Declare the necessary environment variables:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"MY_MONGODB_ROOT_USERNAME=root\nMY_MONGODB_ROOT_PASSWORD=my-super-secret-root-password\nMY_MONGODB_USERNAME=my-app-username\nMY_MONGODB_PASSWORD=my-app-super-secret-password\nMY_MONGODB_DATABASE=my-app\n")),(0,o.kt)("p",null,"Make sure ",(0,o.kt)("inlineCode",{parentName:"p"},"MY_MONGODB_ROOT_USERNAME"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"MY_MONGODB_ROOT_PASSWORD"),"  are declared/exported in any new terminal session from where you might run an odo command for this application."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Create the MongoDB service.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"helm install mongodb bitnami/mongodb \\\n  --set auth.rootPassword=$MY_MONGODB_ROOT_PASSWORD \\\n  --set auth.username=$MY_MONGODB_USERNAME \\\n  --set auth.password=$MY_MONGODB_PASSWORD \\\n  --set auth.database=$MY_MONGODB_DATABASE\n")),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Expected output:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},'$ helm install mongodb bitnami/mongodb \\\n  --set auth.rootPassword=$MY_MONGODB_ROOT_PASSWORD \\\n  --set auth.username=$MY_MONGODB_USERNAME \\\n  --set auth.password=$MY_MONGODB_PASSWORD \\\n  --set auth.database=$MY_MONGODB_DATABASE\nNAME: mongodb\nLAST DEPLOYED: Tue Jul  5 15:53:40 2022\nNAMESPACE: restapi-mongodb\nSTATUS: deployed\nREVISION: 1\nTEST SUITE: None\nNOTES:\nCHART NAME: mongodb\nCHART VERSION: 12.1.24\nAPP VERSION: 5.0.9\n\n** Please be patient while the chart is being deployed **\n\nMongoDB&reg; can be accessed on the following DNS name(s) and ports from within your cluster:\n\n    mongodb.restapi-mongodb.svc.cluster.local\n\nTo get the root password run:\n\n    export MONGODB_ROOT_PASSWORD=$(kubectl get secret --namespace restapi-mongodb mongodb -o jsonpath="{.data.mongodb-root-password}" | base64 -d)\n\nTo get the password for "my-app-username" run:\n\n    export MONGODB_PASSWORD=$(kubectl get secret --namespace restapi-mongodb mongodb -o jsonpath="{.data.mongodb-passwords}" | base64 -d | awk -F\'\n,\' \'{print $1}\')\n\nTo connect to your database, create a MongoDB&reg; client container:\n\n    kubectl run --namespace restapi-mongodb mongodb-client --rm --tty -i --restart=\'Never\' --env="MONGODB_ROOT_PASSWORD=$MONGODB_ROOT_PASSWORD" --\nimage docker.io/bitnami/mongodb:5.0.9-debian-11-r1 --command -- bash\n\nThen, run the following command:\n    mongosh admin --host "mongodb" --authenticationDatabase admin -u root -p $MONGODB_ROOT_PASSWORD\n\nTo connect to your database from outside the cluster execute the following commands:\n\n    kubectl port-forward --namespace restapi-mongodb svc/mongodb 27017:27017 &\n    mongosh --host 127.0.0.1 --authenticationDatabase admin -p $MONGODB_ROOT_PASSWORD\n\n'))),(0,o.kt)("p",null,"Notice the resources(sevice, deployment, and secrets) that are deployed."),(0,o.kt)("p",null,"Wait for the pods to come up, this might take a few minutes:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"$ kubectl get pods\nNAME                       READY   STATUS    RESTARTS   AGE\nmongodb-85fff797f6-fnwvl   1/1     Running   0          63s\n")),(0,o.kt)("h2",{id:"setting-up-the-application"},"Setting up the application"),(0,o.kt)("ol",{start:4},(0,o.kt)("li",{parentName:"ol"},"Clone the repository, and cd into it.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"git clone https://github.com/valaparthvi/restapi-mongodb-odo.git && cd restapi-mongodb-odo\n")),(0,o.kt)("h2",{id:"download-the-devfileyaml"},"Download the devfile.yaml"),(0,o.kt)("ol",{start:5},(0,o.kt)("li",{parentName:"ol"},"Run ",(0,o.kt)("inlineCode",{parentName:"li"},"odo init")," to fetch the necessary devfile.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"odo init --devfile go --name places\n")),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Expected output:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"  __\n /  \\__     Initializing new component\n \\__/  \\    Files: Source code detected, a Devfile will be determined based upon source code autodetection\n /  \\__/    odo version: v3.0.0-beta1\n \\__/\n\nInteractive mode enabled, please answer the following questions:\n \u2713  Downloading devfile \"go\" [4s]\n\nYour new component 'places' is ready in the current directory.\nTo start editing your component, use 'odo dev' and open this folder in your favorite IDE.\nChanges will be directly reflected on the cluster.\n"))),(0,o.kt)("details",null,(0,o.kt)("summary",null,"If you run ",(0,o.kt)("code",null,"odo dev")," to deploy the application at this point, you will notice that the 'run' command has failed with some logs, this is expected, because like we mentioned before, our Go application is dependent on the MongoDB service and will not function unless it is connected to it."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},'$ odo dev\n  __\n /  \\__     Developing using the restapi Devfile\n \\__/  \\    Namespace: restapi-mongodb\n /  \\__/    odo version: v3.0.0-alpha3\n \\__/\n\n\u21aa Deploying to the cluster in developer mode\n \u2713  Waiting for Kubernetes resources [52s]\n \u2713  Syncing files into the container [844ms]\n \u2713  Building your application in container on cluster (command: build) [5s]\n \u2022  Executing the application (command: run)  ...\n \u2717  Executing the application (command: run) [188ms]\n \u26a0  Devfile command "run" exited with an error status in 20 second(s)\n \u26a0  Last 100 lines of log:\ngo: downloading github.com/sirupsen/logrus v1.8.1\n...\n...\n2022/07/06 10:52:10 No binding username found\n - Forwarding from 127.0.0.1:40001 -> 8080\n\nYour application is now running on the cluster\n\nWatching for changes in the current directory /home/pvala/restapi-mongodb-odo\nPress Ctrl+c to exit `odo dev` and delete resources from the cluster\n\n'))),(0,o.kt)("h2",{id:"adding-the-connection-information-to-devfileyaml"},"Adding the connection information to devfile.yaml"),(0,o.kt)("p",null,"There are a few changes that we will need to make to our devfile:"),(0,o.kt)("p",null,"6.1 Change the ",(0,o.kt)("inlineCode",{parentName:"p"},"schemaVersion")," of devfile to 2.2.0."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"schemaVersion: 2.2.0\n")),(0,o.kt)("p",null,"Please note that this change is only necessary because we are using ",(0,o.kt)("a",{parentName:"p",href:"/docs/command-reference/dev#substituting-variables"},"devfile variable substitution"),"."),(0,o.kt)("p",null,"6.2 Add a ",(0,o.kt)("inlineCode",{parentName:"p"},"variables")," field in the devfile."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"variables:\n  PASSWORD: password\n  USERNAME: user\n  HOST: host\n")),(0,o.kt)("p",null,"6.3 Edit the 'runtime' container component in devfile to add information such as username, password, and host required to connect to the MongoDB service."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'components:\n- container:\n    ...\n    ...\n    env:\n    - name: username\n      value: "{{USERNAME}}"\n    - name: password\n      value: "{{PASSWORD}}"\n    - name: host\n      value: "{{HOST}}"\n  name: runtime\n')),(0,o.kt)("p",null,"The values for ",(0,o.kt)("em",{parentName:"p"},"username"),", ",(0,o.kt)("em",{parentName:"p"},"password"),", and ",(0,o.kt)("em",{parentName:"p"},"host")," will be passed to devfile.yaml with the ",(0,o.kt)("inlineCode",{parentName:"p"},"--var")," flag when we run the ",(0,o.kt)("inlineCode",{parentName:"p"},"odo dev")," command."),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Your final devfile.yaml should look something like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'commands:\n- exec:\n    commandLine: GOCACHE=${PROJECT_SOURCE}/.cache go build main.go\n    component: runtime\n    group:\n      isDefault: true\n      kind: build\n    hotReloadCapable: false\n    workingDir: ${PROJECT_SOURCE}\n  id: build\n- exec:\n    commandLine: ./main\n    component: runtime\n    group:\n      isDefault: true\n      kind: run\n    hotReloadCapable: false\n    workingDir: ${PROJECT_SOURCE}\n  id: run\ncomponents:\n- container:\n    dedicatedPod: false\n    endpoints:\n    - name: http\n      targetPort: 8080\n    image: golang:latest\n    memoryLimit: 1024Mi\n    mountSources: true\n    env:\n    - name: username\n      value: "{{USERNAME}}"\n    - name: password\n      value: "{{PASSWORD}}"\n    - name: host\n      value: "{{HOST}}"\n  name: runtime\nvariables:\n  PASSWORD: password\n  USERNAME: user\n  HOST: host\nmetadata:\n  description: Stack with the latest Go version\n  displayName: Go Runtime\n  icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/golang.svg\n  language: go\n  name: restapi\n  projectType: go\n  tags:\n  - Go\n  version: 1.0.0\nschemaVersion: 2.2.0\nstarterProjects:\n- git:\n    checkoutFrom:\n      revision: main\n    remotes:\n      origin: https://github.com/devfile-samples/devfile-stack-go.git\n  name: go-starter\n'))),(0,o.kt)("h2",{id:"deploy-the-application"},"Deploy the application"),(0,o.kt)("ol",{start:7},(0,o.kt)("li",{parentName:"ol"},"Run ",(0,o.kt)("inlineCode",{parentName:"li"},"odo dev")," to deploy the application on the cluster.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},'odo dev \\\n  --var PASSWORD=$MY_MONGODB_ROOT_PASSWORD \\\n  --var USERNAME=$MY_MONGODB_ROOT_USERNAME \\\n  --var HOST="mongodb"\n')),(0,o.kt)("p",null,"The value for ",(0,o.kt)("em",{parentName:"p"},"host"),' is name of the service that belongs to our database application, in this case it is a service resource called "mongodb", you might have noticed it when we deployed the helm chart.'),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Expected output:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},'$ odo dev --var PASSWORD=$MY_MONGODB_ROOT_PASSWORD --var USERNAME=$MY_MONGODB_ROOT_USERNAME --var HOST="mongodb"\n  __\n /  \\__     Developing using the restapi Devfile\n \\__/  \\    Namespace: restapi-mongodb\n /  \\__/    odo version: v3.0.0-alpha3\n \\__/\n\n\u21aa Deploying to the cluster in developer mode\n \u2713  Waiting for Kubernetes resources [52s]\n \u2713  Syncing files into the container [844ms]\n \u2713  Building your application in container on cluster (command: build) [5s]\n \u2022  Executing the application (command: run)  ...\n\nYour application is now running on the cluster\n\n - Forwarding from 127.0.0.1:40001 -> 8080\n\nWatching for changes in the current directory /home/pvala/restapi-mongodb-odo\nPress Ctrl+c to exit `odo dev` and delete resources from the cluster\n'))),(0,o.kt)("h2",{id:"accessing-the-application"},"Accessing the application"),(0,o.kt)("ol",{start:8},(0,o.kt)("li",{parentName:"ol"},"Run the following curl command to test the application:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"curl 127.0.0.1:40001/api/places\n")),(0,o.kt)("p",null,"This will return a ",(0,o.kt)("em",{parentName:"p"},"null")," response since the database is currently empty, but it also means that we have successfully connected to our database application."),(0,o.kt)("ol",{start:9},(0,o.kt)("li",{parentName:"ol"},"Add some data to the database:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},'curl -sSL -XPOST -d \'{"title": "Agra", "description": "Land of Tajmahal"}\' 127.0.0.1:40001/api/places\n')),(0,o.kt)("ol",{start:10},(0,o.kt)("li",{parentName:"ol"},"Fetch the list of places again:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},'$ curl 127.0.0.1:40001/api/places\n\n{"id":"62c2a0659fa147e382a4db31","title":"Agra","description":"Land of Tajmahal"}\n')),(0,o.kt)("h3",{id:"list-of-available-api-endpoints"},"List of available API endpoints"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"GET ",(0,o.kt)("inlineCode",{parentName:"li"},"/api/places")," - List all places"),(0,o.kt)("li",{parentName:"ul"},"POST ",(0,o.kt)("inlineCode",{parentName:"li"},"/api/places")," - Add a new place"),(0,o.kt)("li",{parentName:"ul"},"PUT ",(0,o.kt)("inlineCode",{parentName:"li"},"/api/places")," - Update a place"),(0,o.kt)("li",{parentName:"ul"},"GET ",(0,o.kt)("inlineCode",{parentName:"li"},"/api/places/<id>")," - Fetch place with id ",(0,o.kt)("inlineCode",{parentName:"li"},"<id>")),(0,o.kt)("li",{parentName:"ul"},"DELETE ",(0,o.kt)("inlineCode",{parentName:"li"},"/api/places/<id>")," - Delete place with id ",(0,o.kt)("inlineCode",{parentName:"li"},"<id>"))),(0,o.kt)("h2",{id:"conclusion"},"Conclusion"),(0,o.kt)("p",null,"To conclude this blog, it is possible to connect your application with another microservice without the Service Binding Operator if you have the correct connection information. Using the Service Binding Operator with a ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/redhat-developer/service-binding-operator#known-bindable-operators"},"Bindable Operator")," makes it easy for you to not care about finding the connection information and ease the binding."),(0,o.kt)("h3",{id:"related-articles-on-binding"},"Related articles on binding:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/odo-gh-actions/blog/binding-external-service-with-odo-v3"},"Binding an external service with odo v3")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/command-reference/add-binding"},"odo add binding"))))}c.isMDXComponent=!0}}]);