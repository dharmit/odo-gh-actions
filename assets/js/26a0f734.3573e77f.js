"use strict";(self.webpackChunkodo_dev=self.webpackChunkodo_dev||[]).push([[7113],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(n),h=o,k=u["".concat(s,".").concat(h)]||u[h]||d[h]||r;return n?a.createElement(k,l(l({ref:t},c),{},{components:n})):a.createElement(k,l({ref:t},c))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,l=new Array(r);l[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var p=2;p<r;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6194:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>p});var a=n(3117),o=(n(7294),n(3905));const r={title:"Quickstart Guide",sidebar_position:5},l="Quickstart Guide",i={unversionedId:"getting-started/quickstart",id:"version-2.5.0/getting-started/quickstart",title:"Quickstart Guide",description:"In this guide, we will be using odo to create a to-do list application, with the following:",source:"@site/versioned_docs/version-2.5.0/getting-started/quickstart.md",sourceDirName:"getting-started",slug:"/getting-started/quickstart",permalink:"/docs/2.5.0/getting-started/quickstart",editUrl:"https://github.com/redhat-developer/odo/edit/main/docs/website/versioned_docs/version-2.5.0/getting-started/quickstart.md",tags:[],version:"2.5.0",sidebarPosition:5,frontMatter:{title:"Quickstart Guide",sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"OpenShift",permalink:"/docs/2.5.0/getting-started/cluster-setup/openshift"},next:{title:"Configuration",permalink:"/docs/2.5.0/getting-started/configure"}},s={},p=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Clone the quickstart guide",id:"clone-the-quickstart-guide",level:2},{value:"Create a project",id:"create-a-project",level:2},{value:"Create the frontend Node.JS component",id:"create-the-frontend-nodejs-component",level:2},{value:"Create the backend Java component",id:"create-the-backend-java-component",level:2},{value:"Create the Postgres service",id:"create-the-postgres-service",level:2},{value:"Link the backend component and the service",id:"link-the-backend-component-and-the-service",level:2},{value:"Link the frontend and backend components",id:"link-the-frontend-and-backend-components",level:2},{value:"Testing your application",id:"testing-your-application",level:2},{value:"Frontend Node.JS component",id:"frontend-nodejs-component",level:3},{value:"Backend Java component",id:"backend-java-component",level:3},{value:"Further reading",id:"further-reading",level:2}],c={toc:p};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"quickstart-guide"},"Quickstart Guide"),(0,o.kt)("p",null,"In this guide, we will be using odo to create a to-do list application, with the following:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"ReactJS for the frontend"),(0,o.kt)("li",{parentName:"ul"},"Java Spring Boot for the backend"),(0,o.kt)("li",{parentName:"ul"},"PostgreSQL to store all persistent data")),(0,o.kt)("p",null,"At the end of the guide, you will be able to list, add and delete to-do items from the web browser."),(0,o.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Have the odo binary ",(0,o.kt)("a",{parentName:"li",href:"/docs/2.5.0/getting-started/installation"},"installed"),"."),(0,o.kt)("li",{parentName:"ul"},"A ",(0,o.kt)("a",{parentName:"li",href:"../getting-started/cluster-setup/kubernetes"},"Kubernetes cluster")," set up with a ",(0,o.kt)("a",{parentName:"li",href:"../getting-started/cluster-setup/kubernetes#installing-an-ingress-controller"},"ingress controller"),", ",(0,o.kt)("a",{parentName:"li",href:"../getting-started/cluster-setup/kubernetes#installing-the-operator-lifecycle-manager-olm"},"operator lifecycle manager")," and (optional) ",(0,o.kt)("a",{parentName:"li",href:"../getting-started/cluster-setup/kubernetes#installing-the-service-binding-operator"},"service binding operator"),"."),(0,o.kt)("li",{parentName:"ul"},"Or a ",(0,o.kt)("a",{parentName:"li",href:"../getting-started/cluster-setup/openshift"},"OpenShift cluster")," set up with the (optional) ",(0,o.kt)("a",{parentName:"li",href:"../getting-started/cluster-setup/openshift#installing-the-service-binding-operator"},"service binding operator"))),(0,o.kt)("h2",{id:"clone-the-quickstart-guide"},"Clone the quickstart guide"),(0,o.kt)("p",null,"Clone the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/odo-devfiles/odo-quickstart"},"quickstart")," repo from GitHub:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"git clone https://github.com/odo-devfiles/odo-quickstart\ncd odo-quickstart\n")),(0,o.kt)("h2",{id:"create-a-project"},"Create a project"),(0,o.kt)("p",null,"We will create a project named ",(0,o.kt)("inlineCode",{parentName:"p"},"quickstart")," on the cluster to keep all quickstart-related activities separate from rest of the cluster:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"odo project create quickstart\n")),(0,o.kt)("h2",{id:"create-the-frontend-nodejs-component"},"Create the frontend Node.JS component"),(0,o.kt)("p",null,"Our frontend component is a React application that communicates with the backend component. "),(0,o.kt)("p",null,"We will use the catalog command to list all available components and find ",(0,o.kt)("inlineCode",{parentName:"p"},"nodejs"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"odo catalog list components\n")),(0,o.kt)("p",null,"Example output of ",(0,o.kt)("inlineCode",{parentName:"p"},"odo catalog list components"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"Odo Devfile Components:\nNAME                             DESCRIPTION                                                         REGISTRY\nnodejs                           Stack with Node.js 14                                               DefaultDevfileRegistry\nnodejs-angular                   Stack with Angular 12                                               DefaultDevfileRegistry\nnodejs-nextjs                    Stack with Next.js 11                                               DefaultDevfileRegistry\nnodejs-nuxtjs                    Stack with Nuxt.js 2                                                DefaultDevfileRegistry\n...\n")),(0,o.kt)("p",null,"Pick ",(0,o.kt)("inlineCode",{parentName:"p"},"nodejs")," to create the frontend component:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"cd frontend\nodo create nodejs frontend\n")),(0,o.kt)("p",null,"Create a URL in order to access the component in the browser:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"odo url create --port 3000 --host <CLUSTER-HOSTNAME>\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Minikube users:")," Use ",(0,o.kt)("inlineCode",{parentName:"p"},"minikube ip")," to find out the hostname and then use ",(0,o.kt)("inlineCode",{parentName:"p"},"<MINIKUBE-HOSTNAME>.nip.io"),"  for ",(0,o.kt)("inlineCode",{parentName:"p"},"--host"),"."),(0,o.kt)("p",null,"Push the component to the cluster:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"odo push\n")),(0,o.kt)("p",null,"The URL will be listed in the ",(0,o.kt)("inlineCode",{parentName:"p"},"odo push")," output, or can be found in ",(0,o.kt)("inlineCode",{parentName:"p"},"odo url list"),"."),(0,o.kt)("p",null,"Browse the site and try it out! Note that you will not be able to add, remove or list the to-dos yet, as we have not linked the frontend and the backend components yet."),(0,o.kt)("h2",{id:"create-the-backend-java-component"},"Create the backend Java component"),(0,o.kt)("p",null,"The backend application is a Java Spring Boot based REST API which will list, insert and delete to-dos from the database."),(0,o.kt)("p",null,"Find ",(0,o.kt)("inlineCode",{parentName:"p"},"java-springboot")," in the catalog:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"odo catalog list components\n")),(0,o.kt)("p",null,"Example output of ",(0,o.kt)("inlineCode",{parentName:"p"},"odo catalog list components"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"Odo Devfile Components:\nNAME                             DESCRIPTION                                                         REGISTRY\njava-quarkus                     Quarkus with Java                                                   DefaultDevfileRegistry\njava-springboot                  Spring Boot\xae using Java                                             DefaultDevfileRegistry\njava-vertx                       Upstream Vert.x using Java                                          DefaultDevfileRegistry\n...\n")),(0,o.kt)("p",null,"Let's create the component below:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"cd ../backend\nodo create java-springboot backend\nodo url create --port 8080 --host <CLUSTER-HOSTNAME>\nodo push\n")),(0,o.kt)("p",null,"Note, you will not be able to access ",(0,o.kt)("inlineCode",{parentName:"p"},"http://<YOUR-URL>/api/v1/todos")," yet until we link the backend component to the database service."),(0,o.kt)("h2",{id:"create-the-postgres-service"},"Create the Postgres service"),(0,o.kt)("p",null,"Use ",(0,o.kt)("inlineCode",{parentName:"p"},"odo catalog list services")," to list all available operators."),(0,o.kt)("p",null,"By default, ",(0,o.kt)("a",{parentName:"p",href:"../getting-started/cluster-setup/kubernetes#installing-the-operator-lifecycle-manager-olm"},"Operator Lifecycle Manager (OLM)")," includes no Operators and they must be installed via ",(0,o.kt)("a",{parentName:"p",href:"https://operatorhub.io/"},"Operator Hub")),(0,o.kt)("p",null,"Install the ",(0,o.kt)("a",{parentName:"p",href:"https://operatorhub.io/operator/postgresql"},"Postgres Operator")," on the cluster:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl create -f https://operatorhub.io/install/postgresql.yaml\n")),(0,o.kt)("p",null,"Find ",(0,o.kt)("inlineCode",{parentName:"p"},"postgresql")," in the catalog:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"odo catalog list services\n")),(0,o.kt)("p",null,"Example output of ",(0,o.kt)("inlineCode",{parentName:"p"},"odo catalog list services"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"Services available through Operators\nNAME                        CRDs\npostgresoperator.v5.0.3     PostgresCluster\n")),(0,o.kt)("p",null,"If you don't see the PostgreSQL Operator listed yet, it may still be installing. Check out our ",(0,o.kt)("a",{parentName:"p",href:"../getting-started/cluster-setup/kubernetes#checking-to-see-if-an-operator-has-been-installed"},"Operator troubleshooting guide")," for more information."),(0,o.kt)("p",null,"Create the service usng the provided ",(0,o.kt)("inlineCode",{parentName:"p"},"postgrescluster.yaml")," file from ",(0,o.kt)("a",{parentName:"p",href:"https://access.crunchydata.com/documentation/postgres-operator/5.0.0/tutorial/create-cluster/"},"CrunchyData's Postgres guide"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"odo service create --from-file ../postgrescluster.yaml\n")),(0,o.kt)("p",null,"The service from ",(0,o.kt)("inlineCode",{parentName:"p"},"postgrescluster.yaml")," should now be added to your ",(0,o.kt)("inlineCode",{parentName:"p"},"devfile.yaml"),", do a push to create the database on the cluster:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"odo push\n")),(0,o.kt)("h2",{id:"link-the-backend-component-and-the-service"},"Link the backend component and the service"),(0,o.kt)("p",null,"Now we will link the the backend component (Java API) to the service (Postgres)."),(0,o.kt)("p",null,"First, see if the service has been deployed:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"odo service list\nNAME                      MANAGED BY ODO     STATE      AGE\nPostgresCluster/hippo     Yes (backend)      Pushed     3m42s\n")),(0,o.kt)("p",null,"Link the backend component with the above service:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"odo link PostgresCluster/hippo\n")),(0,o.kt)("p",null,"Push the changes and ",(0,o.kt)("inlineCode",{parentName:"p"},"odo")," will link the service to the component:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"odo push\n")),(0,o.kt)("p",null,"Now your service is linked to the backend component!"),(0,o.kt)("h2",{id:"link-the-frontend-and-backend-components"},"Link the frontend and backend components"),(0,o.kt)("p",null,"For our last step, we will now link the backend Java component (which also uses the Postgres service) and the frontend Node.JS component."),(0,o.kt)("p",null,"This will allow both to communicate with each other in order to store persistent data."),(0,o.kt)("p",null,"Change to the ",(0,o.kt)("inlineCode",{parentName:"p"},"frontend")," component directory and link it to the backend:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"cd ../frontend\nodo link backend\n")),(0,o.kt)("p",null,"Push the changes:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"odo push\n")),(0,o.kt)("p",null,"We're done! Now it's time to test your new multi-component and service application."),(0,o.kt)("h2",{id:"testing-your-application"},"Testing your application"),(0,o.kt)("h3",{id:"frontend-nodejs-component"},"Frontend Node.JS component"),(0,o.kt)("p",null,"Find out what URL is being used by the frontend:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"odo url list\nFound the following URLs for component frontend\nNAME          STATE      URL                           PORT     SECURE     KIND\nhttp-3000     Pushed     http://<URL-OUTPUT>           3000     false      ingress\n")),(0,o.kt)("p",null,"Visit the link and type in some to-dos!"),(0,o.kt)("h3",{id:"backend-java-component"},"Backend Java component"),(0,o.kt)("p",null,"Let's see if each to-do is being stored in the backend api and database."),(0,o.kt)("p",null,"Find out what URL is being used by the backend:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"odo url list\nFound the following URLs for component backend\nNAME         STATE      URL                                       PORT     SECURE     KIND\n8080-tcp     Pushed     http://<URL-OUTPUT>                       8080     false      ingress\n")),(0,o.kt)("p",null,"When you ",(0,o.kt)("inlineCode",{parentName:"p"},"curl")," or view the URL on your browser, you'll now see the list of your to-dos:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'curl http://<URL-OUTPUT>/api/v1/todos\n[{"id":1,"description":"hello"},{"id":2,"description":"world"}]\n')),(0,o.kt)("h2",{id:"further-reading"},"Further reading"),(0,o.kt)("p",null,"Want to learn what else ",(0,o.kt)("inlineCode",{parentName:"p"},"odo")," can do? Check out the ",(0,o.kt)("a",{parentName:"p",href:"../introduction"},"Tutorials")," on the sidebar."))}d.isMDXComponent=!0}}]);