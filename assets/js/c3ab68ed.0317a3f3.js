"use strict";(self.webpackChunkodo_dev=self.webpackChunkodo_dev||[]).push([[2199],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var o=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),f=i,m=u["".concat(s,".").concat(f)]||u[f]||d[f]||r;return n?o.createElement(m,a(a({ref:t},p),{},{components:n})):o.createElement(m,a({ref:t},p))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,a=new Array(r);a[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var c=2;c<r;c++)a[c]=n[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7225:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var o=n(3117),i=(n(7294),n(3905));const r={title:"Basics",sidebar_position:2},a="Concepts of odo",l={unversionedId:"getting-started/basics",id:"version-2.5.0/getting-started/basics",title:"Basics",description:"odo abstracts Kubernetes concepts into a developer friendly terminology; in this document, we will take a look at the following terminologies:",source:"@site/versioned_docs/version-2.5.0/getting-started/basics.md",sourceDirName:"getting-started",slug:"/getting-started/basics",permalink:"/odo-gh-actions/docs/2.5.0/getting-started/basics",editUrl:"https://github.com/redhat-developer/odo/edit/main/docs/website/versioned_docs/version-2.5.0/getting-started/basics.md",tags:[],version:"2.5.0",sidebarPosition:2,frontMatter:{title:"Basics",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Features",permalink:"/odo-gh-actions/docs/2.5.0/getting-started/features"},next:{title:"Installation",permalink:"/odo-gh-actions/docs/2.5.0/getting-started/installation"}},s={},c=[{value:"Application",id:"application",level:3},{value:"Component",id:"component",level:3},{value:"Project",id:"project",level:3},{value:"Context",id:"context",level:3},{value:"URL",id:"url",level:3},{value:"Storage",id:"storage",level:3},{value:"Service",id:"service",level:3},{value:"Devfile",id:"devfile",level:3}],p={toc:c};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"concepts-of-odo"},"Concepts of odo"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"odo")," abstracts Kubernetes concepts into a developer friendly terminology; in this document, we will take a look at the following terminologies:"),(0,i.kt)("h3",{id:"application"},"Application"),(0,i.kt)("p",null,"An application in ",(0,i.kt)("inlineCode",{parentName:"p"},"odo")," is a classic application developed with a ",(0,i.kt)("a",{parentName:"p",href:"https://www.redhat.com/en/topics/cloud-native-apps"},"cloud-native approach")," that is used to perform a particular task."),(0,i.kt)("p",null,"Examples of applications: Online Video Streaming, Hotel Reservation System, Online Shopping."),(0,i.kt)("h3",{id:"component"},"Component"),(0,i.kt)("p",null,"In the cloud-native architecture, an application is a collection of small, independent, and loosely coupled components; a ",(0,i.kt)("inlineCode",{parentName:"p"},"odo")," component is one of these components."),(0,i.kt)("p",null,"Examples of components: API Backend, Web Frontend, Payment Backend."),(0,i.kt)("h3",{id:"project"},"Project"),(0,i.kt)("p",null,"A project helps achieve multi-tenancy: several applications can be run in the same cluster by different teams in different projects."),(0,i.kt)("h3",{id:"context"},"Context"),(0,i.kt)("p",null,"Context is the directory on the system that contains the source code, tests, libraries and ",(0,i.kt)("inlineCode",{parentName:"p"},"odo")," specific config files for a single component."),(0,i.kt)("h3",{id:"url"},"URL"),(0,i.kt)("p",null,"A URL exposes a component to be accessed from outside the cluster."),(0,i.kt)("h3",{id:"storage"},"Storage"),(0,i.kt)("p",null,"Storage is the persistent storage in the cluster: it persists the data across restarts and any rebuilds of a component."),(0,i.kt)("h3",{id:"service"},"Service"),(0,i.kt)("p",null,"Service is an external application that a component can connect to or depend on to gain a additional functionality."),(0,i.kt)("p",null,"Example of services: PostgreSQL, MySQL, Redis, RabbitMQ."),(0,i.kt)("h3",{id:"devfile"},"Devfile"),(0,i.kt)("p",null,"Devfile is a portable YAML file containing the definition of a component and its related URLs, storages and services. Visit ",(0,i.kt)("a",{parentName:"p",href:"https://devfile.io/"},"devfile.io")," for more information on devfiles."))}d.isMDXComponent=!0}}]);