"use strict";(self.webpackChunkodo_dev=self.webpackChunkodo_dev||[]).push([[8161],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>m});var o=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=o.createContext({}),s=function(e){var n=o.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=s(e.components);return o.createElement(p.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},u=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,p=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=s(t),m=a,g=u["".concat(p,".").concat(m)]||u[m]||c[m]||r;return t?o.createElement(g,l(l({ref:n},d),{},{components:t})):o.createElement(g,l({ref:n},d))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,l=new Array(r);l[0]=u;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var s=2;s<r;s++)l[s]=t[s];return o.createElement.apply(null,l)}return o.createElement.apply(null,t)}u.displayName="MDXCreateElement"},8215:(e,n,t)=>{t.d(n,{Z:()=>a});var o=t(7294);function a(e){let{children:n,hidden:t,className:a}=e;return o.createElement("div",{role:"tabpanel",hidden:t,className:a},n)}},9877:(e,n,t)=>{t.d(n,{Z:()=>d});var o=t(3117),a=t(7294),r=t(2389),l=t(650),i=t(6010);const p="tabItem_LplD";function s(e){var n,t,r;const{lazy:s,block:d,defaultValue:c,values:u,groupId:m,className:g}=e,h=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),k=null!=u?u:h.map((e=>{let{props:{value:n,label:t,attributes:o}}=e;return{value:n,label:t,attributes:o}})),y=(0,l.lx)(k,((e,n)=>e.value===n.value));if(y.length>0)throw new Error('Docusaurus error: Duplicate values "'+y.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const N=null===c?c:null!=(n=null!=c?c:null==(t=h.find((e=>e.props.default)))?void 0:t.props.value)?n:null==(r=h[0])?void 0:r.props.value;if(null!==N&&!k.some((e=>e.value===N)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+N+'" but none of its children has the corresponding value. Available values are: '+k.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:v,setTabGroupChoices:f}=(0,l.UB)(),[b,C]=(0,a.useState)(N),E=[],{blockElementScrollPositionUntilNextRender:w}=(0,l.o5)();if(null!=m){const e=v[m];null!=e&&e!==b&&k.some((n=>n.value===e))&&C(e)}const T=e=>{const n=e.currentTarget,t=E.indexOf(n),o=k[t].value;o!==b&&(w(n),C(o),null!=m&&f(m,o))},R=e=>{var n;let t=null;switch(e.key){case"ArrowRight":{const n=E.indexOf(e.currentTarget)+1;t=E[n]||E[0];break}case"ArrowLeft":{const n=E.indexOf(e.currentTarget)-1;t=E[n]||E[E.length-1];break}}null==(n=t)||n.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":d},g)},k.map((e=>{let{value:n,label:t,attributes:r}=e;return a.createElement("li",(0,o.Z)({role:"tab",tabIndex:b===n?0:-1,"aria-selected":b===n,key:n,ref:e=>E.push(e),onKeyDown:R,onFocus:T,onClick:T},r,{className:(0,i.Z)("tabs__item",p,null==r?void 0:r.className,{"tabs__item--active":b===n})}),null!=t?t:n)}))),s?(0,a.cloneElement)(h.filter((e=>e.props.value===b))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},h.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==b})))))}function d(e){const n=(0,r.Z)();return a.createElement(s,(0,o.Z)({key:String(n)},e))}},4637:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>p,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var o=t(3117),a=(t(7294),t(3905)),r=t(9877),l=t(8215);const i={title:"Quickstart Guide",sidebar_position:5},p="Quickstart Guide",s={unversionedId:"user-guides/quickstart",id:"user-guides/quickstart",title:"Quickstart Guide",description:'In this guide, we will be using odo to create a "Hello World" application.',source:"@site/docs/user-guides/quickstart.md",sourceDirName:"user-guides",slug:"/user-guides/quickstart",permalink:"/docs/user-guides/quickstart",editUrl:"https://github.com/redhat-developer/odo/edit/main/docs/website/docs/user-guides/quickstart.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"Quickstart Guide",sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Configuration",permalink:"/docs/overview/configure"},next:{title:"Deploying to IBM-Z and Power Architectures",permalink:"/docs/user-guides/advanced/deploying-on-ibm-z-and-power"}},d={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Step 0. Creating the initial source code (optional)",id:"step-0-creating-the-initial-source-code-optional",level:2},{value:"Step 1. Connect to your cluster and create a new namespace or project",id:"step-1-connect-to-your-cluster-and-create-a-new-namespace-or-project",level:2},{value:"Creating a new namespace",id:"creating-a-new-namespace",level:3},{value:"Login to OpenShift Cluster",id:"login-to-openshift-cluster",level:3},{value:"Create a new project",id:"create-a-new-project",level:3},{value:"Step 2. Creating your application (<code>odo init</code>)",id:"step-2-creating-your-application-odo-init",level:2},{value:"Step 3. Developing your application continuously (<code>odo dev</code>)",id:"step-3-developing-your-application-continuously-odo-dev",level:2},{value:"Step 4. Deploying your application to the world (<code>odo deploy</code>)",id:"step-4-deploying-your-application-to-the-world-odo-deploy",level:2},{value:"1. Containerize the application",id:"1-containerize-the-application",level:4},{value:"2. Modify the Devfile",id:"2-modify-the-devfile",level:4},{value:"3. Run the <code>odo deploy</code> command",id:"3-run-the-odo-deploy-command",level:4},{value:"1. Containerize the application",id:"1-containerize-the-application-1",level:4},{value:"2. Modify the Devfile",id:"2-modify-the-devfile-1",level:4},{value:"3. Run the <code>odo deploy</code> command",id:"3-run-the-odo-deploy-command-1",level:4},{value:"1. Containerize the application",id:"1-containerize-the-application-2",level:4},{value:"2. Modify the Devfile",id:"2-modify-the-devfile-2",level:4},{value:"3. Run the <code>odo deploy</code> command",id:"3-run-the-odo-deploy-command-2",level:4},{value:"1. Containerize the application",id:"1-containerize-the-application-3",level:4},{value:"2. Modify the Devfile",id:"2-modify-the-devfile-3",level:4},{value:"3. Run the <code>odo deploy</code> command",id:"3-run-the-odo-deploy-command-3",level:4},{value:"(OPTIONAL) 4. Delete the resources",id:"optional-4-delete-the-resources",level:4}],u={toc:c};function m(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"quickstart-guide"},"Quickstart Guide"),(0,a.kt)("p",null,'In this guide, we will be using odo to create a "Hello World" application.'),(0,a.kt)("p",null,"You have the option of choosing from the following frameworks for the quickstart guide:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Node.js"),(0,a.kt)("li",{parentName:"ul"},".NET"),(0,a.kt)("li",{parentName:"ul"},"Java (Spring Boot)"),(0,a.kt)("li",{parentName:"ul"},"Go")),(0,a.kt)("p",null,"A full list of example applications can be viewed with the ",(0,a.kt)("inlineCode",{parentName:"p"},"odo registry")," command."),(0,a.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Have the odo binary ",(0,a.kt)("a",{parentName:"li",href:"/docs/overview/installation"},"installed"),"."),(0,a.kt)("li",{parentName:"ul"},"A ",(0,a.kt)("a",{parentName:"li",href:"../overview/cluster-setup/kubernetes"},"Kubernetes")," or ",(0,a.kt)("a",{parentName:"li",href:"../overview/cluster-setup/openshift"},"OpenShift cluster")," ")),(0,a.kt)("h2",{id:"step-0-creating-the-initial-source-code-optional"},"Step 0. Creating the initial source code (optional)"),(0,a.kt)("p",null,"We will create the example source code by using some popular frameworks."),(0,a.kt)("p",null,"This is ",(0,a.kt)("em",{parentName:"p"},"optional")," and you may use an existing project instead or a starter project from ",(0,a.kt)("inlineCode",{parentName:"p"},"odo init"),"."),(0,a.kt)(r.Z,{groupId:"quickstart",mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"nodejs",label:"Node.js",mdxType:"TabItem"},(0,a.kt)("p",null,"For Node.JS we will use the ",(0,a.kt)("a",{parentName:"p",href:"https://expressjs.com/"},"Express")," framework for our example."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Install Express:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"npm install express --save\n")),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},"Generate an example project:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"npx express-generator\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"$ npx express-generator\n  warning: the default view engine will not be jade in future releases\n  warning: use `--view=jade' or `--help' for additional options\n\n\n   create : public/\n   create : public/javascripts/\n   create : public/images/\n   create : public/stylesheets/\n   create : public/stylesheets/style.css\n   create : routes/\n   create : routes/index.js\n   create : routes/users.js\n   create : views/\n   create : views/error.jade\n   create : views/index.jade\n   create : views/layout.jade\n   create : app.js\n   create : package.json\n   create : bin/\n   create : bin/www\n\n   install dependencies:\n     $ npm install\n\n   run the app:\n     $ DEBUG=express:* npm start\n"))),(0,a.kt)(l.Z,{value:"dotnet",label:".NET",mdxType:"TabItem"},(0,a.kt)("p",null,"  For .NET we will use the ",(0,a.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/aspnet/core/tutorials/first-mvc-app/start-mvc?view=aspnetcore-6.0&tabs=visual-studio-code"},"ASP.NET Core MVC")," example. "),(0,a.kt)("p",null,"  ASP.NET MVC is a web application framework that implements the model-view-controller (MVC) pattern."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Generate an example project:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"dotnet new mvc --name app\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"$ dotnet new mvc --name app\nWelcome to .NET 6.0!\n---------------------\nSDK Version: 6.0.104\n\n...\n\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore/6.0-third-party-notices for details.\n\nProcessing post-creation actions...\nRunning 'dotnet restore' on /Users/user/app/app.csproj...\n  Determining projects to restore...\n  Restored /Users/user/app/app.csproj (in 84 ms).\nRestore succeeded.\n"))),(0,a.kt)(l.Z,{value:"java",label:"Java (Spring Boot)",mdxType:"TabItem"},(0,a.kt)("p",null,"For Java, we will use the ",(0,a.kt)("a",{parentName:"p",href:"https://start.spring.io/"},"Spring Initializr")," to generate the example source code:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Navigate to ",(0,a.kt)("a",{parentName:"li",href:"https://start.spring.io/"},"start.spring.io")," "),(0,a.kt)("li",{parentName:"ol"},"Select ",(0,a.kt)("strong",{parentName:"li"},"11")," under ",(0,a.kt)("strong",{parentName:"li"},"Java")),(0,a.kt)("li",{parentName:"ol"},'Click on "Add" under "Dependencies"'),(0,a.kt)("li",{parentName:"ol"},'Select "Spring Web"'),(0,a.kt)("li",{parentName:"ol"},'Click "Generate" to generate and download the source code')),(0,a.kt)("p",null,"Finally, open a terminal and navigate to the directory.")),(0,a.kt)(l.Z,{value:"go",label:"Go",mdxType:"TabItem"},(0,a.kt)("p",null,"For Go, we will create our own application using the standard library:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Create the following ",(0,a.kt)("inlineCode",{parentName:"li"},"main.go")," file:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n  "fmt"\n  "net/http"\n)\n\nfunc main() {\n  http.HandleFunc("/", HelloServer)\n  http.ListenAndServe("0.0.0.0:8080", nil)\n}\n\nfunc HelloServer(w http.ResponseWriter, r *http.Request) {\n  fmt.Fprintf(w, "Hello, %s!", r.URL.Path[1:])\n}\n')),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},"Initialize a ",(0,a.kt)("inlineCode",{parentName:"li"},"go.mod")," file:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"go mod init my.example.go.project\n")))),(0,a.kt)("p",null,"Your source code has now been generated and created in the directory."),(0,a.kt)("h2",{id:"step-1-connect-to-your-cluster-and-create-a-new-namespace-or-project"},"Step 1. Connect to your cluster and create a new namespace or project"),(0,a.kt)("p",null,"Before starting you should make sure that odo is connected to your cluster and that you have created a new namespace (or project if you are using OpenShift)."),(0,a.kt)(r.Z,{groupId:"quickstart",mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"kubernetes",label:"Kubernetes",mdxType:"TabItem"},(0,a.kt)("h3",{id:"creating-a-new-namespace"},"Creating a new namespace"),(0,a.kt)("p",null,"If you are using Kubernetes, you can create a new namespace with the ",(0,a.kt)("inlineCode",{parentName:"p"},"odo create namespace")," command."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},'$ odo create namespace odo-dev\n \u2713  Namespace "odo-dev" is ready for use\n \u2713  New namespace created and now using namespace: odo-dev\n'))),(0,a.kt)(l.Z,{value:"openshift",label:"OpenShift",mdxType:"TabItem"},(0,a.kt)("h3",{id:"login-to-openshift-cluster"},"Login to OpenShift Cluster"),(0,a.kt)("p",null,"The easiest way to connect ",(0,a.kt)("inlineCode",{parentName:"p"},"odo"),' to an OpenShift cluster is use copy "Copy login command" function in OpenShift Web Console.'),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Login to OpenShift Web Console."),(0,a.kt)("li",{parentName:"ol"},'At the top right corner click on your username and then on "Copy login command".'),(0,a.kt)("li",{parentName:"ol"},"You will be prompted to enter your login credentials again."),(0,a.kt)("li",{parentName:"ol"},'After login, open "Display Token" link.'),(0,a.kt)("li",{parentName:"ol"},"Copy whole ",(0,a.kt)("inlineCode",{parentName:"li"},"oc login --token ...")," command and paste it into the terminal, ",(0,a.kt)("strong",{parentName:"li"},"before executing the command replace ",(0,a.kt)("inlineCode",{parentName:"strong"},"oc")," with ",(0,a.kt)("inlineCode",{parentName:"strong"},"odo"),"."))),(0,a.kt)("h3",{id:"create-a-new-project"},"Create a new project"),(0,a.kt)("p",null,"If you are using OpenShift, you can create a new namespace with the ",(0,a.kt)("inlineCode",{parentName:"p"},"odo create project")," command."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},'$ odo create project odo-dev\n \u2713  Project "odo-dev" is ready for use\n \u2713  New project created and now using namespace: odo-dev\n')))),(0,a.kt)("h2",{id:"step-2-creating-your-application-odo-init"},"Step 2. Creating your application (",(0,a.kt)("inlineCode",{parentName:"h2"},"odo init"),")"),(0,a.kt)("p",null,"Now we'll initialize your application by creating a ",(0,a.kt)("inlineCode",{parentName:"p"},"devfile.yaml")," to be deployed."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"odo")," handles this automatically with the ",(0,a.kt)("inlineCode",{parentName:"p"},"odo init")," command by autodetecting your source code and downloading the appropriate Devfile."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Note:")," If you skipped ",(0,a.kt)("em",{parentName:"p"},"Step 0"),', select a "starter project" when running ',(0,a.kt)("inlineCode",{parentName:"p"},"odo init"),"."),(0,a.kt)(r.Z,{groupId:"quickstart",mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"nodejs",label:"Node.js",mdxType:"TabItem"},(0,a.kt)("p",null,"Let's run ",(0,a.kt)("inlineCode",{parentName:"p"},"odo init")," and select Node.js:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"odo init\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},'$ odo init\n  __\n /  \\__     Initializing new component\n \\__/  \\    Files: Source code detected, a Devfile will be determined based upon source code autodetection\n /  \\__/    odo version: v3.0.0-alpha2\n \\__/\n\nInteractive mode enabled, please answer the following questions:\nBased on the files in the current directory odo detected\nLanguage: javascript\nProject type: nodejs\nThe devfile "nodejs" from the registry "DefaultDevfileRegistry" will be downloaded.\n? Is this correct? Yes\n \u2713  Downloading devfile "nodejs" from registry "DefaultDevfileRegistry" [501ms]\nCurrent component configuration:\nContainer "runtime":\n  Opened ports:\n   - 3000\n  Environment variables:\n? Select container for which you want to change configuration? NONE - configuration is correct\n? Enter component name: my-nodejs-app\n\nYour new component \'my-nodejs-app\' is ready in the current directory.\nTo start editing your component, use \'odo dev\' and open this folder in your favorite IDE.\nChanges will be directly reflected on the cluster.\n')),(0,a.kt)("p",null,"A ",(0,a.kt)("inlineCode",{parentName:"p"},"devfile.yaml")," has now been added to your directory and now you're ready to start development.")),(0,a.kt)(l.Z,{value:"dotnet",label:".NET",mdxType:"TabItem"},(0,a.kt)("p",null,"Let's run ",(0,a.kt)("inlineCode",{parentName:"p"},"odo init")," and select .NET 6.0:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"odo init\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},'$ odo init\n  __\n /  \\__     Initializing new component\n \\__/  \\    Files: Source code detected, a Devfile will be determined based upon source code autodetection\n /  \\__/    odo version: v3.0.0-alpha2\n \\__/\n\nInteractive mode enabled, please answer the following questions:\nBased on the files in the current directory odo detected\nLanguage: dotnet\nProject type: dotnet\nThe devfile "dotnet50" from the registry "DefaultDevfileRegistry" will be downloaded.\n? Is this correct? No\n? Select language: dotnet\n? Select project type: .NET 6.0\n \u2713  Downloading devfile "dotnet60" from registry "DefaultDevfileRegistry" [596ms]\nCurrent component configuration:\nContainer "dotnet":\n  Opened ports:\n   - 8080\n  Environment variables:\n   - STARTUP_PROJECT = app.csproj\n   - ASPNETCORE_ENVIRONMENT = Development\n   - ASPNETCORE_URLS = http://*:8080\n   - CONFIGURATION = Debug\n? Select container for which you want to change configuration? NONE - configuration is correct\n? Enter component name: my-dotnet60-app\n\nYour new component \'my-dotnet60-app\' is ready in the current directory.\nTo start editing your component, use \'odo dev\' and open this folder in your favorite IDE.\nChanges will be directly reflected on the cluster.\n')),(0,a.kt)("p",null,"A ",(0,a.kt)("inlineCode",{parentName:"p"},"devfile.yaml")," has now been added to your directory and now you're ready to start development.")),(0,a.kt)(l.Z,{value:"java",label:"Java (Spring Boot)",mdxType:"TabItem"},(0,a.kt)("p",null,"Let's run ",(0,a.kt)("inlineCode",{parentName:"p"},"odo init")," and select Java Spring Boot:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"odo init\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},'$ odo init\n  __\n /  \\__     Initializing new component\n \\__/  \\    Files: Source code detected, a Devfile will be determined based upon source code autodetection\n /  \\__/    odo version: v3.0.0-alpha2\n \\__/\n\nInteractive mode enabled, please answer the following questions:\nBased on the files in the current directory odo detected\nLanguage: java\nProject type: spring\nThe devfile "java-springboot" from the registry "DefaultDevfileRegistry" will be downloaded.\n? Is this correct? Yes\n \u2713  Downloading devfile "java-springboot" from registry "DefaultDevfileRegistry" [1s]\nCurrent component configuration:\nContainer "m2":\n  Opened ports:\n  Environment variables:\nContainer "tools":\n  Opened ports:\n   - 8080\n  Environment variables:\n   - DEBUG_PORT = 5858\n? Select container for which you want to change configuration? NONE - configuration is correct\n? Enter component name: my-java-springboot-app\n\nYour new component \'my-java-springboot-app\' is ready in the current directory.\nTo start editing your component, use \'odo dev\' and open this folder in your favorite IDE.\nChanges will be directly reflected on the cluster.\n')),(0,a.kt)("p",null,"A ",(0,a.kt)("inlineCode",{parentName:"p"},"devfile.yaml")," has now been added to your directory and now you're ready to start development.")),(0,a.kt)(l.Z,{value:"go",label:"Go",mdxType:"TabItem"},(0,a.kt)("p",null,"Let's run ",(0,a.kt)("inlineCode",{parentName:"p"},"odo init")," and select Go:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"odo init\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},'$ odo init\n  __\n /  \\__     Initializing new component\n \\__/  \\    Files: Source code detected, a Devfile will be determined based upon source code autodetection\n /  \\__/    odo version: v3.0.0-alpha2\n \\__/\n\nInteractive mode enabled, please answer the following questions:\nBased on the files in the current directory odo detected\nLanguage: go\nProject type: go\nThe devfile "go" from the registry "DefaultDevfileRegistry" will be downloaded.\n? Is this correct? Yes\n \u2713  Downloading devfile "go" from registry "DefaultDevfileRegistry" [769ms]\nCurrent component configuration:\nContainer "runtime":\n  Opened ports:\n   - 8080\n  Environment variables:\n? Select container for which you want to change configuration? NONE - configuration is correct\n? Enter component name: my-go-app\n\nYour new component \'my-go-app\' is ready in the current directory.\nTo start editing your component, use \'odo dev\' and open this folder in your favorite IDE.\nChanges will be directly reflected on the cluster.\n')))),(0,a.kt)("h2",{id:"step-3-developing-your-application-continuously-odo-dev"},"Step 3. Developing your application continuously (",(0,a.kt)("inlineCode",{parentName:"h2"},"odo dev"),")"),(0,a.kt)("p",null,"Now that we've generated our code as well as our Devfile, let's start on development."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"odo")," uses ",(0,a.kt)("a",{parentName:"p",href:"/docs/introduction#what-is-inner-loop-and-outer-loop"},"inner loop development")," and allows you to code,\nbuild, run and test the application in a continuous workflow."),(0,a.kt)("p",null,"Once you run ",(0,a.kt)("inlineCode",{parentName:"p"},"odo dev"),", you can freely edit code in your favourite IDE and watch as ",(0,a.kt)("inlineCode",{parentName:"p"},"odo")," rebuilds and redeploys it."),(0,a.kt)(r.Z,{groupId:"quickstart",mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"nodejs",label:"Node.js",mdxType:"TabItem"},(0,a.kt)("p",null,"Let's run ",(0,a.kt)("inlineCode",{parentName:"p"},"odo dev")," to start development on your Node.JS application:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"odo dev\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"$ odo dev\n  __\n /  \\__     Developing using the my-nodejs-app Devfile\n \\__/  \\    Namespace: default\n /  \\__/    odo version: v3.0.0-alpha2\n \\__/\n\n\u21aa Deploying to the cluster in developer mode\n \u2713  Waiting for Kubernetes resources [3s]\n \u2713  Syncing files into the container [330ms]\n \u2713  Building your application in container on cluster [4s]\n \u2713  Executing the application [1s]\n\nYour application is now running on the cluster\n - Forwarding from 127.0.0.1:40001 -> 3000\n\nWatching for changes in the current directory /Users/user/express\nPress Ctrl+c to exit `odo dev` and delete resources from the cluster\n"))),(0,a.kt)(l.Z,{value:"dotnet",label:".NET",mdxType:"TabItem"},(0,a.kt)("p",null,"Let's run ",(0,a.kt)("inlineCode",{parentName:"p"},"odo dev")," to start development on your .NET application:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"odo dev\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"$ odo dev\n  __\n /  \\__     Developing using the my-dotnet60-app Devfile\n \\__/  \\    Namespace: default\n /  \\__/    odo version: v3.0.0-alpha2\n \\__/\n\n\u21aa Deploying to the cluster in developer mode\n \u2713  Waiting for Kubernetes resources [3s]\n \u2713  Syncing files into the container [2s]\n \u2713  Building your application in container on cluster [5s]\n \u2713  Executing the application [1s]\n\nYour application is now running on the cluster\n - Forwarding from 127.0.0.1:40001 -> 8080\n\nWatching for changes in the current directory /Users/user/dotnet\nPress Ctrl+c to exit `odo dev` and delete resources from the cluster\n"))),(0,a.kt)(l.Z,{value:"java",label:"Java (Spring Boot)",mdxType:"TabItem"},(0,a.kt)("p",null,"Let's run ",(0,a.kt)("inlineCode",{parentName:"p"},"odo dev")," to start development on your Java Spring Boot application:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"odo dev\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"$ odo dev\n  __\n /  \\__     Developing using the my-java-springboot-app Devfile\n \\__/  \\    Namespace: default\n /  \\__/    odo version: v3.0.0-alpha2\n \\__/\n\n\u21aa Deploying to the cluster in developer mode\n \u2713  Waiting for Kubernetes resources [5s]\n \u2713  Added storage m2 to my-java-springboot-app\n \u2713  Syncing files into the container [734ms]\n \u2713  Building your application in container on cluster [21s]\n \u2713  Executing the application [1s]\n\nYour application is now running on the cluster\n - Forwarding from 127.0.0.1:40001 -> 8080\n\nWatching for changes in the current directory /Users/user/java\nPress Ctrl+c to exit `odo dev` and delete resources from the cluster\n"))),(0,a.kt)(l.Z,{value:"go",label:"Go",mdxType:"TabItem"},(0,a.kt)("p",null,"Let's run ",(0,a.kt)("inlineCode",{parentName:"p"},"odo dev")," to start development on your .NET application:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"odo dev\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"$ odo dev\n  __\n /  \\__     Developing using the my-go-app Devfile\n \\__/  \\    Namespace: default\n /  \\__/    odo version: v3.0.0-alpha2\n \\__/\n\n\u21aa Deploying to the cluster in developer mode\n \u2713  Waiting for Kubernetes resources [375ms]\n \u2713  Syncing files into the container [213ms]\n \u2713  Building your application in container on cluster [684ms]\n \u2713  Executing the application [1s]\n\nYour application is now running on the cluster\n - Forwarding from 127.0.0.1:40001 -> 8080\n\nWatching for changes in the current directory /Users/user/go\nPress Ctrl+c to exit `odo dev` and delete resources from the cluster\n")))),(0,a.kt)("p",null,"You can now access the application at ",(0,a.kt)("a",{parentName:"p",href:"http://127.0.0.1:40001"},"127.0.0.1:40001")," in your local browser and start your development loop. ",(0,a.kt)("inlineCode",{parentName:"p"},"odo")," will watch for changes and push the code for real-time updates."),(0,a.kt)("h2",{id:"step-4-deploying-your-application-to-the-world-odo-deploy"},"Step 4. Deploying your application to the world (",(0,a.kt)("inlineCode",{parentName:"h2"},"odo deploy"),")"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Prerequisites:")),(0,a.kt)("p",null,"Before we begin, you must login to a container registry that we will be pushing our application to."),(0,a.kt)("p",null,"Login to your container registry with either ",(0,a.kt)("inlineCode",{parentName:"p"},"podman")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"docker"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"podman login\n")),(0,a.kt)("p",null,"Or"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"docker login\n")),(0,a.kt)("p",null,"In order for ",(0,a.kt)("inlineCode",{parentName:"p"},"odo deploy")," to push your image, your container registry needs to be accessible."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"NOTE for MacOS:")," If you are running Apple Silicon (M1/M2), you must set your Docker build platform to the cluster you are deploying to."),(0,a.kt)("p",null,"For example, if you are deploying to ",(0,a.kt)("inlineCode",{parentName:"p"},"linux/amd64"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"export DOCKER_DEFAULT_PLATFORM=linux/amd64  \n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Overview:")),(0,a.kt)("p",null,"There are three steps to deploy your application:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Containerize your application by creating a ",(0,a.kt)("inlineCode",{parentName:"li"},"Dockerfile")),(0,a.kt)("li",{parentName:"ol"},"Modify ",(0,a.kt)("inlineCode",{parentName:"li"},"devfile.yaml")," to add your Kubernetes code"),(0,a.kt)("li",{parentName:"ol"},"Run ",(0,a.kt)("inlineCode",{parentName:"li"},"odo deploy"))),(0,a.kt)(r.Z,{groupId:"quickstart",mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"nodejs",label:"Node.js",mdxType:"TabItem"},(0,a.kt)("h4",{id:"1-containerize-the-application"},"1. Containerize the application"),(0,a.kt)("p",null,"In order to deploy our application, we must containerize it in order to build and push to a registry. Create the following ",(0,a.kt)("inlineCode",{parentName:"p"},"Dockerfile")," in the same directory:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dockerfile"},'# Sample copied from https://github.com/nodeshift-starters/devfile-sample/blob/main/Dockerfile\n\n# Install the app dependencies in a full Node docker image\nFROM registry.access.redhat.com/ubi8/nodejs-14:latest\n\n# Copy package.json and package-lock.json\nCOPY package*.json ./\n\n# Install app dependencies\nRUN npm install --production\n\n# Copy the dependencies into a Slim Node docker image\nFROM registry.access.redhat.com/ubi8/nodejs-14-minimal:latest\n\n# Install app dependencies\nCOPY --from=0 /opt/app-root/src/node_modules /opt/app-root/src/node_modules\nCOPY . /opt/app-root/src\n\nENV NODE_ENV production\nENV PORT 3000\n\nCMD ["npm", "start"]\n')),(0,a.kt)("h4",{id:"2-modify-the-devfile"},"2. Modify the Devfile"),(0,a.kt)("p",null,"Let's modify the ",(0,a.kt)("inlineCode",{parentName:"p"},"devfile.yaml")," and add the respective deployment code."),(0,a.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"When copy/pasting to ",(0,a.kt)("inlineCode",{parentName:"p"},"devfile.yaml"),", make sure the lines you inserted are correctly indented."))),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"odo deploy")," uses Devfile schema ",(0,a.kt)("strong",{parentName:"p"},"2.2.0"),". Change the schema to reflect the change:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'# Deploy "kind" ID\'s use schema 2.2.0+\nschemaVersion: 2.2.0\n')),(0,a.kt)("p",null,"Add the ",(0,a.kt)("inlineCode",{parentName:"p"},"variables")," section:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'# Add the following variables code anywhere in devfile.yaml\n# This MUST be a container registry you are able to access\nvariables:\n  CONTAINER_IMAGE: quay.io/MYUSERNAME/nodejs-odo-example\n  RESOURCE_NAME: my-nodejs-app\n  CONTAINER_PORT: "3000"\n  DOMAIN_NAME: nodejs.example.com\n')),(0,a.kt)("p",null,"Add the commands used to deploy:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'# This is the main "composite" command that will run all below commands\ncommands:\n- id: deploy\n  composite:\n    commands:\n    - build-image\n    - k8s-deployment\n    - k8s-service\n    - k8s-url\n    group:\n      isDefault: true\n      kind: deploy\n\n# Below are the commands and their respective components that they are "linked" to deploy\n- id: build-image\n  apply:\n    component: outerloop-build\n- id: k8s-deployment\n  apply:\n    component: outerloop-deployment\n- id: k8s-service\n  apply:\n    component: outerloop-service\n- id: k8s-url\n  apply:\n    component: outerloop-url\n')),(0,a.kt)("p",null,"Add the Docker image location and Kubernetes Deployment, Service, and Ingress resources to ",(0,a.kt)("inlineCode",{parentName:"p"},"components"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'components:\n\n# This will build the container image before deployment\n- name: outerloop-build\n  image:\n    dockerfile:\n      buildContext: ${PROJECT_SOURCE}\n      rootRequired: false\n      uri: ./Dockerfile\n    imageName: "{{CONTAINER_IMAGE}}"\n\n# This will create a Deployment in order to run your container image across\n# the cluster.\n- name: outerloop-deployment\n  kubernetes:\n    inlined: |\n      kind: Deployment\n      apiVersion: apps/v1\n      metadata:\n        name: {{RESOURCE_NAME}}\n      spec:\n        replicas: 1\n        selector:\n          matchLabels:\n            app: {{RESOURCE_NAME}}\n        template:\n          metadata:\n            labels:\n              app: {{RESOURCE_NAME}}\n          spec:\n            containers:\n              - name: {{RESOURCE_NAME}}\n                image: {{CONTAINER_IMAGE}}\n                ports:\n                  - name: http\n                    containerPort: {{CONTAINER_PORT}}\n                    protocol: TCP\n                resources:\n                  limits:\n                    memory: "1024Mi"\n                    cpu: "500m"\n\n# This will create a Service so your Deployment is accessible.\n# Depending on your cluster, you may modify this code so it\'s a\n# NodePort, ClusterIP or a LoadBalancer service.\n- name: outerloop-service\n  kubernetes:\n    inlined: |\n      apiVersion: v1\n      kind: Service\n      metadata:\n        name: {{RESOURCE_NAME}}\n      spec:\n        ports:\n        - name: "{{CONTAINER_PORT}}"\n          port: {{CONTAINER_PORT}}\n          protocol: TCP\n          targetPort: {{CONTAINER_PORT}}\n        selector:\n          app: {{RESOURCE_NAME}}\n        type: ClusterIP\n')),(0,a.kt)("p",null,"To be able to access our application let's add one more ",(0,a.kt)("inlineCode",{parentName:"p"},"component")," to the Devfile.\nFor OpenShift cluster we add Route. For Kubernetes cluster we add Ingress."),(0,a.kt)(r.Z,{groupId:"quickstart",mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"kubernetes",label:"Kubernetes",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'- name: outerloop-url\n  kubernetes:\n    inlined: |\n      apiVersion: networking.k8s.io/v1\n      kind: Ingress\n      metadata:\n        name: {{RESOURCE_NAME}}\n      spec:\n        rules:\n          - host: "{{DOMAIN_NAME}}"\n            http:\n              paths:\n                - path: "/"\n                  pathType: Prefix\n                  backend:\n                    service:\n                      name: {{RESOURCE_NAME}} \n                      port:\n                        number: {{CONTAINER_PORT}}\n'))),(0,a.kt)(l.Z,{value:"openshift",label:"OpenShift",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"- name: outerloop-url\n  kubernetes:\n    inlined: |\n      apiVersion: route.openshift.io/v1\n      kind: Route\n      metadata:\n        name: {{RESOURCE_NAME}}\n      spec:\n        path: /\n        to:\n          kind: Service\n          name: {{RESOURCE_NAME}}\n        port:\n          targetPort: {{CONTAINER_PORT}}\n")))),(0,a.kt)("h4",{id:"3-run-the-odo-deploy-command"},"3. Run the ",(0,a.kt)("inlineCode",{parentName:"h4"},"odo deploy")," command"),(0,a.kt)("p",null,"Now we're ready to run ",(0,a.kt)("inlineCode",{parentName:"p"},"odo deploy"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"odo deploy\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"$ odo deploy\n  __\n /  \\__     Deploying the application using my-nodejs-app Devfile\n \\__/  \\    Namespace: default\n /  \\__/    odo version: v3.0.0-alpha2\n \\__/\n\n\u21aa Building & Pushing Container: MYUSERNAME/nodejs-odo-example\n \u2022  Building image locally  ...\n \u2713  Building image locally [880ms]\n \u2022  Pushing image to container registry  ...\n \u2713  Pushing image to container registry [5s]\n\n\u21aa Deploying Kubernetes Component: nodejs-example\n \u2713  Searching resource in cluster\n \u2713  Creating kind Deployment [48ms]\n\n\u21aa Deploying Kubernetes Component: nodejs-example\n \u2713  Searching resource in cluster\n \u2713  Creating kind Service [51ms]\n\n\u21aa Deploying Kubernetes Component: nodejs-example\n \u2713  Searching resource in cluster\n \u2713  Creating kind Ingress [49ms]\n\nYour Devfile has been successfully deployed\n")),(0,a.kt)("p",null,"Your application has now been deployed to the Kubernetes cluster with Deployment, Service, and Ingress or Route resources."),(0,a.kt)(r.Z,{groupId:"quickstart",mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"kubernetes",label:"Kubernetes",mdxType:"TabItem"},(0,a.kt)("p",null,"Test your application by visiting the ",(0,a.kt)("inlineCode",{parentName:"p"},"DOMAIN_NAME")," variable that you had set in the ",(0,a.kt)("inlineCode",{parentName:"p"},"devfile.yaml"),".")),(0,a.kt)(l.Z,{value:"openshift",label:"OpenShift",mdxType:"TabItem"},"There is currently no way to get the Route url using only the `odo` command. This will be fixed in the next odo release.",(0,a.kt)("p",null,"For now, you have to use ",(0,a.kt)("inlineCode",{parentName:"p"},"oc get routes")," command to get the Route URL.")))),(0,a.kt)(l.Z,{value:"dotnet",label:".NET",mdxType:"TabItem"},(0,a.kt)("h4",{id:"1-containerize-the-application-1"},"1. Containerize the application"),(0,a.kt)("p",null,"In order to deploy our application, we must containerize it in order to build and push to a registry. Create the following ",(0,a.kt)("inlineCode",{parentName:"p"},"Dockerfile")," in the same directory:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dockerfile"},'FROM registry.access.redhat.com/ubi8/dotnet-60:6.0 as builder\nWORKDIR /opt/app-root/src\nCOPY --chown=1001 . .\nRUN dotnet publish -c Release\n\n\nFROM registry.access.redhat.com/ubi8/dotnet-60:6.0\nEXPOSE 8080\nCOPY --from=builder /opt/app-root/src/bin /opt/app-root/src/bin\nWORKDIR /opt/app-root/src/bin/Release/net6.0/publish\nCMD ["dotnet", "app.dll"]\n')),(0,a.kt)("h4",{id:"2-modify-the-devfile-1"},"2. Modify the Devfile"),(0,a.kt)("p",null,"Let's modify the ",(0,a.kt)("inlineCode",{parentName:"p"},"devfile.yaml")," and add the respective deployment code."),(0,a.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"When copy/pasting to ",(0,a.kt)("inlineCode",{parentName:"p"},"devfile.yaml"),", make sure the lines you inserted are correctly indented."))),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"odo deploy")," uses Devfile schema ",(0,a.kt)("strong",{parentName:"p"},"2.2.0"),". Change the schema to reflect the change:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'# Deploy "kind" ID\'s use schema 2.2.0+\nschemaVersion: 2.2.0\n')),(0,a.kt)("p",null,"Add the ",(0,a.kt)("inlineCode",{parentName:"p"},"variables")," section:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'# Add the following variables code anywhere in devfile.yaml\n# This MUST be a container registry you are able to access\nvariables:\n  CONTAINER_IMAGE: quay.io/MYUSERNAME/dotnet-odo-example\n  RESOURCE_NAME: my-dotnet-app\n  CONTAINER_PORT: "8080"\n  DOMAIN_NAME: dotnet.example.com\n')),(0,a.kt)("p",null,"Add the commands used to deploy:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'# This is the main "composite" command that will run all below commands\ncommands:\n- id: deploy\n  composite:\n    commands:\n    - build-image\n    - k8s-deployment\n    - k8s-service\n    - k8s-url\n    group:\n      isDefault: true\n      kind: deploy\n\n# Below are the commands and their respective components that they are "linked" to deploy\n- id: build-image\n  apply:\n    component: outerloop-build\n- id: k8s-deployment\n  apply:\n    component: outerloop-deployment\n- id: k8s-service\n  apply:\n    component: outerloop-service\n- id: k8s-url\n  apply:\n    component: outerloop-url\n')),(0,a.kt)("p",null,"Add the Docker image location as well as Kubernetes Deployment and Service resources to ",(0,a.kt)("inlineCode",{parentName:"p"},"components"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'components:\n\n# This will build the container image before deployment\n- name: outerloop-build\n  image:\n    dockerfile:\n      buildContext: ${PROJECT_SOURCE}\n      rootRequired: false\n      uri: ./Dockerfile\n    imageName: "{{CONTAINER_IMAGE}}"\n\n# This will create a Deployment in order to run your container image across\n# the cluster.\n- name: outerloop-deployment\n  kubernetes:\n    inlined: |\n      kind: Deployment\n      apiVersion: apps/v1\n      metadata:\n        name: {{RESOURCE_NAME}}\n      spec:\n        replicas: 1\n        selector:\n          matchLabels:\n            app: {{RESOURCE_NAME}}\n        template:\n          metadata:\n            labels:\n              app: {{RESOURCE_NAME}}\n          spec:\n            containers:\n              - name: {{RESOURCE_NAME}}\n                image: {{CONTAINER_IMAGE}}\n                ports:\n                  - name: http\n                    containerPort: {{CONTAINER_PORT}}\n                    protocol: TCP\n                resources:\n                  limits:\n                    memory: "1024Mi"\n                    cpu: "500m"\n\n# This will create a Service so your Deployment is accessible.\n# Depending on your cluster, you may modify this code so it\'s a\n# NodePort, ClusterIP or a LoadBalancer service.\n- name: outerloop-service\n  kubernetes:\n    inlined: |\n      apiVersion: v1\n      kind: Service\n      metadata:\n        name: {{RESOURCE_NAME}}\n      spec:\n        ports:\n        - name: "{{CONTAINER_PORT}}"\n          port: {{CONTAINER_PORT}}\n          protocol: TCP\n          targetPort: {{CONTAINER_PORT}}\n        selector:\n          app: {{RESOURCE_NAME}}\n        type: ClusterIP\n')),(0,a.kt)("p",null,"To be able to access our application we need to add one more ",(0,a.kt)("inlineCode",{parentName:"p"},"component")," to the Devfile.\nFor OpenShift cluster we add Route. For Kubernetes cluster we add Ingress."),(0,a.kt)(r.Z,{groupId:"quickstart",mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"kubernetes",label:"Kubernetes",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'- name: outerloop-url\n  kubernetes:\n    inlined: |\n      apiVersion: networking.k8s.io/v1\n      kind: Ingress\n      metadata:\n        name: {{RESOURCE_NAME}}\n      spec:\n        rules:\n          - host: "{{DOMAIN_NAME}}"\n            http:\n              paths:\n                - path: "/"\n                  pathType: Prefix\n                  backend:\n                    service:\n                      name: {{RESOURCE_NAME}} \n                      port:\n                        number: {{CONTAINER_PORT}}\n'))),(0,a.kt)(l.Z,{value:"openshift",label:"OpenShift",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"- name: outerloop-url\n  kubernetes:\n    inlined: |\n      apiVersion: route.openshift.io/v1\n      kind: Route\n      metadata:\n        name: {{RESOURCE_NAME}}\n      spec:\n        path: /\n        to:\n          kind: Service\n          name: {{RESOURCE_NAME}}\n        port:\n          targetPort: {{CONTAINER_PORT}}\n")))),(0,a.kt)("h4",{id:"3-run-the-odo-deploy-command-1"},"3. Run the ",(0,a.kt)("inlineCode",{parentName:"h4"},"odo deploy")," command"),(0,a.kt)("p",null,"Now we're ready to run ",(0,a.kt)("inlineCode",{parentName:"p"},"odo deploy"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"odo deploy\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"$ odo deploy\n  __\n /  \\__     Deploying the application using my-dotnet-app Devfile\n \\__/  \\    Namespace: default\n /  \\__/    odo version: v3.0.0-alpha2\n \\__/\n\n\u21aa Building & Pushing Container: MYUSERNAME/dotnet-odo-example\n \u2022  Building image locally  ...\n \u2713  Building image locally [880ms]\n \u2022  Pushing image to container registry  ...\n \u2713  Pushing image to container registry [5s]\n\n\u21aa Deploying Kubernetes Component: dotnet-example\n \u2713  Searching resource in cluster\n \u2713  Creating kind Deployment [48ms]\n\n\u21aa Deploying Kubernetes Component: dotnet-example\n \u2713  Searching resource in cluster\n \u2713  Creating kind Service [51ms]\n\n\u21aa Deploying Kubernetes Component: dotnet-example\n \u2713  Searching resource in cluster\n \u2713  Creating kind Ingress [49ms]\n\nYour Devfile has been successfully deployed\n")),(0,a.kt)("p",null,"Your application has now been deployed to the Kubernetes cluster with Deployment, Service, and Ingress resources."),(0,a.kt)("p",null,"Test your application by visiting the ",(0,a.kt)("inlineCode",{parentName:"p"},"DOMAIN_NAME")," variable that you had set in the ",(0,a.kt)("inlineCode",{parentName:"p"},"devfile.yaml"),".")),(0,a.kt)(l.Z,{value:"java",label:"Java (Spring Boot)",mdxType:"TabItem"},(0,a.kt)("h4",{id:"1-containerize-the-application-2"},"1. Containerize the application"),(0,a.kt)("p",null,"In order to deploy our application, we must containerize it in order to build and push to a registry. Create the following ",(0,a.kt)("inlineCode",{parentName:"p"},"Dockerfile")," in the same directory:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dockerfile"},"FROM registry.access.redhat.com/ubi8/openjdk-11 as builder\n\nUSER jboss\nWORKDIR /tmp/src\nCOPY --chown=jboss . /tmp/src\nRUN mvn package\n\nFROM registry.access.redhat.com/ubi8/openjdk-11\nCOPY --from=builder /tmp/src/target/*.jar /deployments/app.jar\n")),(0,a.kt)("h4",{id:"2-modify-the-devfile-2"},"2. Modify the Devfile"),(0,a.kt)("p",null,"Let's modify the ",(0,a.kt)("inlineCode",{parentName:"p"},"devfile.yaml")," and add the respective deployment code."),(0,a.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"When copy/pasting to ",(0,a.kt)("inlineCode",{parentName:"p"},"devfile.yaml"),", make sure the lines you inserted are correctly indented."))),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"odo deploy")," uses Devfile schema ",(0,a.kt)("strong",{parentName:"p"},"2.2.0"),". Change the schema to reflect the change:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'# Deploy "kind" ID\'s use schema 2.2.0+\nschemaVersion: 2.2.0\n')),(0,a.kt)("p",null,"Add the ",(0,a.kt)("inlineCode",{parentName:"p"},"variables")," section:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'# Add the following variables code anywhere in devfile.yaml\n# This MUST be a container registry you are able to access\nvariables:\n  CONTAINER_IMAGE: quay.io/MYUSERNAME/java-springboot-odo-example\n  RESOURCE_NAME: my-java-springboot-app\n  CONTAINER_PORT: "8080"\n  DOMAIN_NAME: java-springboot.example.com\n')),(0,a.kt)("p",null,"Add the commands used to deploy:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'# This is the main "composite" command that will run all below commands\ncommands:\n- id: deploy\n  composite:\n    commands:\n    - build-image\n    - k8s-deployment\n    - k8s-service\n    - k8s-url\n    group:\n      isDefault: true\n      kind: deploy\n\n# Below are the commands and their respective components that they are "linked" to deploy\n- id: build-image\n  apply:\n    component: outerloop-build\n- id: k8s-deployment\n  apply:\n    component: outerloop-deployment\n- id: k8s-service\n  apply:\n    component: outerloop-service\n- id: k8s-url\n  apply:\n    component: outerloop-url\n')),(0,a.kt)("p",null,"Add the Docker image location as well as Kubernetes Deployment and Service resources to ",(0,a.kt)("inlineCode",{parentName:"p"},"components"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'components:\n\n# This will build the container image before deployment\n- name: outerloop-build\n  image:\n    dockerfile:\n      buildContext: ${PROJECT_SOURCE}\n      rootRequired: false\n      uri: ./Dockerfile\n    imageName: "{{CONTAINER_IMAGE}}"\n\n# This will create a Deployment in order to run your container image across\n# the cluster.\n- name: outerloop-deployment\n  kubernetes:\n    inlined: |\n      kind: Deployment\n      apiVersion: apps/v1\n      metadata:\n        name: {{RESOURCE_NAME}}\n      spec:\n        replicas: 1\n        selector:\n          matchLabels:\n            app: {{RESOURCE_NAME}}\n        template:\n          metadata:\n            labels:\n              app: {{RESOURCE_NAME}}\n          spec:\n            containers:\n              - name: {{RESOURCE_NAME}}\n                image: {{CONTAINER_IMAGE}}\n                ports:\n                  - name: http\n                    containerPort: {{CONTAINER_PORT}}\n                    protocol: TCP\n                resources:\n                  limits:\n                    memory: "1024Mi"\n                    cpu: "500m"\n\n# This will create a Service so your Deployment is accessible.\n# Depending on your cluster, you may modify this code so it\'s a\n# NodePort, ClusterIP or a LoadBalancer service.\n- name: outerloop-service\n  kubernetes:\n    inlined: |\n      apiVersion: v1\n      kind: Service\n      metadata:\n        name: {{RESOURCE_NAME}}\n      spec:\n        ports:\n        - name: "{{CONTAINER_PORT}}"\n          port: {{CONTAINER_PORT}}\n          protocol: TCP\n          targetPort: {{CONTAINER_PORT}}\n        selector:\n          app: {{RESOURCE_NAME}}\n        type: ClusterIP\n')),(0,a.kt)("p",null,"To be able to access our application we need to add one more ",(0,a.kt)("inlineCode",{parentName:"p"},"component")," to the Devfile.\nFor OpenShift cluster we add Route. For Kubernetes cluster we add Ingress."),(0,a.kt)(r.Z,{groupId:"quickstart",mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"kubernetes",label:"Kubernetes",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'- name: outerloop-url\n  kubernetes:\n    inlined: |\n      apiVersion: networking.k8s.io/v1\n      kind: Ingress\n      metadata:\n        name: {{RESOURCE_NAME}}\n      spec:\n        rules:\n          - host: "{{DOMAIN_NAME}}"\n            http:\n              paths:\n                - path: "/"\n                  pathType: Prefix\n                  backend:\n                    service:\n                      name: {{RESOURCE_NAME}} \n                      port:\n                        number: {{CONTAINER_PORT}}\n'))),(0,a.kt)(l.Z,{value:"openshift",label:"OpenShift",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"- name: outerloop-url\n  kubernetes:\n    inlined: |\n      apiVersion: route.openshift.io/v1\n      kind: Route\n      metadata:\n        name: {{RESOURCE_NAME}}\n      spec:\n        path: /\n        to:\n          kind: Service\n          name: {{RESOURCE_NAME}}\n        port:\n          targetPort: {{CONTAINER_PORT}}\n")))),(0,a.kt)("h4",{id:"3-run-the-odo-deploy-command-2"},"3. Run the ",(0,a.kt)("inlineCode",{parentName:"h4"},"odo deploy")," command"),(0,a.kt)("p",null,"Now we're ready to run ",(0,a.kt)("inlineCode",{parentName:"p"},"odo deploy"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"odo deploy\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"$ odo deploy\n  __\n /  \\__     Deploying the application using my-java-springboot-app Devfile\n \\__/  \\    Namespace: default\n /  \\__/    odo version: v3.0.0-alpha2\n \\__/\n\n\u21aa Building & Pushing Container: MYUSERNAME/java-springboot-example\n \u2022  Building image locally  ...\n \u2713  Building image locally [880ms]\n \u2022  Pushing image to container registry  ...\n \u2713  Pushing image to container registry [5s]\n\n\u21aa Deploying Kubernetes Component: java-springboot-example\n \u2713  Searching resource in cluster\n \u2713  Creating kind Deployment [48ms]\n\n\u21aa Deploying Kubernetes Component: java-springboot-example\n \u2713  Searching resource in cluster\n \u2713  Creating kind Service [51ms]\n\n\u21aa Deploying Kubernetes Component: java-springboot-example\n \u2713  Searching resource in cluster\n \u2713  Creating kind Ingress [49ms]\n\nYour Devfile has been successfully deployed\n")),(0,a.kt)("p",null,"Your application has now been deployed to the Kubernetes cluster with Deployment, Service, and Ingress resources."),(0,a.kt)("p",null,"Test your application by visiting the ",(0,a.kt)("inlineCode",{parentName:"p"},"DOMAIN_NAME")," variable that you had set in the ",(0,a.kt)("inlineCode",{parentName:"p"},"devfile.yaml"),".")),(0,a.kt)(l.Z,{value:"go",label:"Go",mdxType:"TabItem"},(0,a.kt)("h4",{id:"1-containerize-the-application-3"},"1. Containerize the application"),(0,a.kt)("p",null,"In order to deploy our application, we must containerize it in order to build and push to a registry. Create the following ",(0,a.kt)("inlineCode",{parentName:"p"},"Dockerfile")," in the same directory:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dockerfile"},'# This Dockerfile is referenced from:\n# https://github.com/GoogleCloudPlatform/golang-samples/blob/main/run/helloworld/Dockerfile\n\n# Build\nFROM golang:1.17-buster as builder\nWORKDIR /app\nCOPY go.* ./\nRUN go mod download\nCOPY . ./\nRUN go build -v -o server\n\n# Create a "lean" container\nFROM debian:buster-slim\nRUN set -x && apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y \\\n    ca-certificates && \\\n    rm -rf /var/lib/apt/lists/*\nCOPY --from=builder /app/server /app/server\n\n# Run\nCMD ["/app/server"]\n')),(0,a.kt)("h4",{id:"2-modify-the-devfile-3"},"2. Modify the Devfile"),(0,a.kt)("p",null,"Let's modify the ",(0,a.kt)("inlineCode",{parentName:"p"},"devfile.yaml")," and add the respective deployment code."),(0,a.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"When copy/pasting to ",(0,a.kt)("inlineCode",{parentName:"p"},"devfile.yaml"),", make sure the lines you inserted are correctly indented."))),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"odo deploy")," uses Devfile schema ",(0,a.kt)("strong",{parentName:"p"},"2.2.0"),". Change the schema to reflect the change:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'# Deploy "kind" ID\'s use schema 2.2.0+\nschemaVersion: 2.2.0\n')),(0,a.kt)("p",null,"Add the ",(0,a.kt)("inlineCode",{parentName:"p"},"variables")," section:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'# Add the following variables code anywhere in devfile.yaml\n# This MUST be a container registry you are able to access\nvariables:\n  CONTAINER_IMAGE: quay.io/MYUSERNAME/go-odo-example\n  RESOURCE_NAME: my-go-app\n  CONTAINER_PORT: "8080"\n  DOMAIN_NAME: go.example.com\n')),(0,a.kt)("p",null,"Add the commands used to deploy:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'# This is the main "composite" command that will run all below commands\ncommands:\n- id: deploy\n  composite:\n    commands:\n    - build-image\n    - k8s-deployment\n    - k8s-service\n    - k8s-url\n    group:\n      isDefault: true\n      kind: deploy\n\n# Below are the commands and their respective components that they are "linked" to deploy\n- id: build-image\n  apply:\n    component: outerloop-build\n- id: k8s-deployment\n  apply:\n    component: outerloop-deployment\n- id: k8s-service\n  apply:\n    component: outerloop-service\n- id: k8s-url\n  apply:\n    component: outerloop-url\n')),(0,a.kt)("p",null,"Add the Docker image location and Kubernetes Deployment, Service, and Ingress resources to ",(0,a.kt)("inlineCode",{parentName:"p"},"components"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'components:\n\n# This will build the container image before deployment\n- name: outerloop-build\n  image:\n    dockerfile:\n      buildContext: ${PROJECT_SOURCE}\n      rootRequired: false\n      uri: ./Dockerfile\n    imageName: "{{CONTAINER_IMAGE}}"\n\n# This will create a Deployment in order to run your container image across\n# the cluster.\n- name: outerloop-deployment\n  kubernetes:\n    inlined: |\n      kind: Deployment\n      apiVersion: apps/v1\n      metadata:\n        name: {{RESOURCE_NAME}}\n      spec:\n        replicas: 1\n        selector:\n          matchLabels:\n            app: {{RESOURCE_NAME}}\n        template:\n          metadata:\n            labels:\n              app: {{RESOURCE_NAME}}\n          spec:\n            containers:\n              - name: {{RESOURCE_NAME}}\n                image: {{CONTAINER_IMAGE}}\n                ports:\n                  - name: http\n                    containerPort: {{CONTAINER_PORT}}\n                    protocol: TCP\n                resources:\n                  limits:\n                    memory: "1024Mi"\n                    cpu: "500m"\n\n# This will create a Service so your Deployment is accessible.\n# Depending on your cluster, you may modify this code so it\'s a\n# NodePort, ClusterIP or a LoadBalancer service.\n- name: outerloop-service\n  kubernetes:\n    inlined: |\n      apiVersion: v1\n      kind: Service\n      metadata:\n        name: {{RESOURCE_NAME}}\n      spec:\n        ports:\n        - name: "{{CONTAINER_PORT}}"\n          port: {{CONTAINER_PORT}}\n          protocol: TCP\n          targetPort: {{CONTAINER_PORT}}\n        selector:\n          app: {{RESOURCE_NAME}}\n        type: ClusterIP\n\n')),(0,a.kt)("p",null,"To be able to access our application let's add one more ",(0,a.kt)("inlineCode",{parentName:"p"},"component")," to the Devfile.\nFor OpenShift cluster we add Route. For Kubernetes cluster we add Ingress."),(0,a.kt)(r.Z,{groupId:"quickstart",mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"kubernetes",label:"Kubernetes",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'- name: outerloop-url\n  kubernetes:\n    inlined: |\n      apiVersion: networking.k8s.io/v1\n      kind: Ingress\n      metadata:\n        name: {{RESOURCE_NAME}}\n      spec:\n        rules:\n          - host: "{{DOMAIN_NAME}}"\n            http:\n              paths:\n                - path: "/"\n                  pathType: Prefix\n                  backend:\n                    service:\n                      name: {{RESOURCE_NAME}} \n                      port:\n                        number: {{CONTAINER_PORT}}\n'))),(0,a.kt)(l.Z,{value:"openshift",label:"OpenShift",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"- name: outerloop-url\n  kubernetes:\n    inlined: |\n      apiVersion: route.openshift.io/v1\n      kind: Route\n      metadata:\n        name: {{RESOURCE_NAME}}\n      spec:\n        path: /\n        to:\n          kind: Service\n          name: {{RESOURCE_NAME}}\n        port:\n          targetPort: {{CONTAINER_PORT}}\n")))),(0,a.kt)("h4",{id:"3-run-the-odo-deploy-command-3"},"3. Run the ",(0,a.kt)("inlineCode",{parentName:"h4"},"odo deploy")," command"),(0,a.kt)("p",null,"Now we're ready to run ",(0,a.kt)("inlineCode",{parentName:"p"},"odo deploy"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"odo deploy\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"$ odo deploy\n  __\n /  \\__     Deploying the application using my-go-app Devfile\n \\__/  \\    Namespace: default\n /  \\__/    odo version: v3.0.0-alpha2\n \\__/\n\n\u21aa Building & Pushing Container: MYUSERNAME/go-example\n \u2022  Building image locally  ...\n \u2713  Building image locally [880ms]\n \u2022  Pushing image to container registry  ...\n \u2713  Pushing image to container registry [5s]\n\n\u21aa Deploying Kubernetes Component: go-example\n \u2713  Searching resource in cluster\n \u2713  Creating kind Deployment [48ms]\n\n\u21aa Deploying Kubernetes Component: go-example\n \u2713  Searching resource in cluster\n \u2713  Creating kind Service [51ms]\n\n\u21aa Deploying Kubernetes Component: go-example\n \u2713  Searching resource in cluster\n \u2713  Creating kind Ingress [49ms]\n\nYour Devfile has been successfully deployed\n")),(0,a.kt)("p",null,"Your application has now been deployed to the Kubernetes cluster with Deployment, Service, and Ingress resources."),(0,a.kt)("p",null,"Test your application by visiting the ",(0,a.kt)("inlineCode",{parentName:"p"},"DOMAIN_NAME")," variable that you had set in the ",(0,a.kt)("inlineCode",{parentName:"p"},"devfile.yaml"),"."))),(0,a.kt)("h4",{id:"optional-4-delete-the-resources"},"(OPTIONAL) 4. Delete the resources"),(0,a.kt)("p",null,"After testing your application, you may optionally undeploy using the ",(0,a.kt)("inlineCode",{parentName:"p"},"odo delete component")," command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"odo delete component\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},'$ odo delete component\nSearching resources to delete, please wait...\nThis will delete "my-app" from the namespace "default".\n \u2022  The component contains the following resources that will get deleted:\n        - Deployment: my-app\n        - Service: my-app\n        - Ingress: my-app\n? Are you sure you want to delete "my-app" and all its resources? Yes\nThe component "my-app" is successfully deleted from namespace "default"\n \u2022  There are still resources left in the cluster that might be belonging to the deleted component.\n        - Endpoints: svc\n        - Service: svc\nIf you want to delete those, execute `odo delete component --name my-app --namespace default`\n')))}m.isMDXComponent=!0}}]);