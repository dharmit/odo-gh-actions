"use strict";(self.webpackChunkodo_dev=self.webpackChunkodo_dev||[]).push([[293],{7438:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"2.5.0","label":"2.5.0 (Stable) \ud83d\ude80","banner":null,"badge":true,"className":"docs-version-2.5.0","isLast":false,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Introduction","href":"/odo-gh-actions/docs/2.5.0/introduction","docId":"introduction"},{"type":"category","label":"Getting Started","collapsible":false,"collapsed":false,"items":[{"type":"link","label":"Features","href":"/odo-gh-actions/docs/2.5.0/getting-started/features","docId":"getting-started/features"},{"type":"link","label":"Basics","href":"/odo-gh-actions/docs/2.5.0/getting-started/basics","docId":"getting-started/basics"},{"type":"link","label":"Installation","href":"/odo-gh-actions/docs/2.5.0/getting-started/installation","docId":"getting-started/installation"},{"type":"category","label":"Cluster Setup","collapsible":false,"collapsed":false,"items":[{"type":"link","label":"Kubernetes","href":"/odo-gh-actions/docs/2.5.0/getting-started/cluster-setup/kubernetes","docId":"getting-started/cluster-setup/kubernetes"},{"type":"link","label":"OpenShift","href":"/odo-gh-actions/docs/2.5.0/getting-started/cluster-setup/openshift","docId":"getting-started/cluster-setup/openshift"}]},{"type":"link","label":"Quickstart Guide","href":"/odo-gh-actions/docs/2.5.0/getting-started/quickstart","docId":"getting-started/quickstart"},{"type":"link","label":"Configuration","href":"/odo-gh-actions/docs/2.5.0/getting-started/configure","docId":"getting-started/configure"}]},{"type":"category","label":"Using odo","collapsible":false,"collapsed":false,"items":[{"type":"link","label":"Creating components","href":"/odo-gh-actions/docs/2.5.0/using-odo/create-component","docId":"using-odo/create-component"},{"type":"link","label":"Create URL","href":"/odo-gh-actions/docs/2.5.0/using-odo/create-url","docId":"using-odo/create-url"}]},{"type":"category","label":"Command Reference","collapsible":false,"collapsed":false,"items":[{"type":"link","label":"odo build-images","href":"/odo-gh-actions/docs/2.5.0/command-reference/build-images","docId":"command-reference/build-images"},{"type":"link","label":"odo catalog","href":"/odo-gh-actions/docs/2.5.0/command-reference/catalog","docId":"command-reference/catalog"},{"type":"link","label":"odo create","href":"/odo-gh-actions/docs/2.5.0/command-reference/create","docId":"command-reference/create"},{"type":"link","label":"odo delete","href":"/odo-gh-actions/docs/2.5.0/command-reference/delete","docId":"command-reference/delete"},{"type":"link","label":"odo deploy","href":"/odo-gh-actions/docs/2.5.0/command-reference/deploy","docId":"command-reference/deploy"},{"type":"link","label":"odo link","href":"/odo-gh-actions/docs/2.5.0/command-reference/link","docId":"command-reference/link"},{"type":"link","label":"odo registry","href":"/odo-gh-actions/docs/2.5.0/command-reference/registry","docId":"command-reference/registry"},{"type":"link","label":"odo service","href":"/odo-gh-actions/docs/2.5.0/command-reference/service","docId":"command-reference/service"},{"type":"link","label":"odo storage","href":"/odo-gh-actions/docs/2.5.0/command-reference/storage","docId":"command-reference/storage"},{"type":"link","label":"Common Flags","href":"/odo-gh-actions/docs/2.5.0/command-reference/flags","docId":"command-reference/flags"},{"type":"link","label":"JSON Output","href":"/odo-gh-actions/docs/2.5.0/command-reference/json-output","docId":"command-reference/json-output"}]},{"type":"category","label":"Tutorials","collapsible":false,"collapsed":false,"items":[{"type":"link","label":"Deploying a Java Open Liberty application with PostgreSQL","href":"/odo-gh-actions/docs/2.5.0/tutorials/deploying-java-app-with-database","docId":"tutorials/deploying-java-app-with-database"},{"type":"link","label":"Creating Kubernetes resources","href":"/odo-gh-actions/docs/2.5.0/tutorials/create-k8s-resources","docId":"tutorials/create-k8s-resources"},{"type":"link","label":"Using odo on IBM-Z and Power","href":"/odo-gh-actions/docs/2.5.0/tutorials/deploying-a-devfile-using-odo-on-IBM-Z-and-Power","docId":"tutorials/deploying-a-devfile-using-odo-on-IBM-Z-and-Power"},{"type":"link","label":"Using the odo.dev.push.path related attribute","href":"/odo-gh-actions/docs/2.5.0/tutorials/using-devfile-odo.dev.push.path-attribute","docId":"tutorials/using-devfile-odo.dev.push.path-attribute"},{"type":"link","label":"Using devfile lifecycle events","href":"/odo-gh-actions/docs/2.5.0/tutorials/using-devfile-lifecycle-events","docId":"tutorials/using-devfile-lifecycle-events"},{"type":"link","label":"Debugging using devfile","href":"/odo-gh-actions/docs/2.5.0/tutorials/debugging-using-devfile","docId":"tutorials/debugging-using-devfile"}]},{"type":"category","label":"Architecture","collapsible":false,"collapsed":false,"items":[{"type":"link","label":"Secure Registry","href":"/odo-gh-actions/docs/2.5.0/architecture/secure-registry","docId":"architecture/secure-registry"}]},{"type":"link","label":"Contributing to odo","href":"/odo-gh-actions/docs/2.5.0/contribution","docId":"contribution"}]},"docs":{"architecture/secure-registry":{"id":"architecture/secure-registry","title":"Secure Registry","description":"What is a secure devfile registry?","sidebar":"tutorialSidebar"},"command-reference/build-images":{"id":"command-reference/build-images","title":"odo build-images","description":"odo can build container images based on Dockerfiles, and push these images to their registries.","sidebar":"tutorialSidebar"},"command-reference/catalog":{"id":"command-reference/catalog","title":"odo catalog","description":"odo uses different catalogs to deploy components and services.","sidebar":"tutorialSidebar"},"command-reference/create":{"id":"command-reference/create","title":"odo create","description":"odo uses the devfile to store the configuration of and describe the resources like storage, services, etc. of a component. The odo create command allows you to generate this file.","sidebar":"tutorialSidebar"},"command-reference/delete":{"id":"command-reference/delete","title":"odo delete","description":"odo delete command is useful for deleting resources that are managed by odo.","sidebar":"tutorialSidebar"},"command-reference/deploy":{"id":"command-reference/deploy","title":"odo deploy","description":"odo can be used to deploy components in a similar manner they would be deployed by a CI/CD system,","sidebar":"tutorialSidebar"},"command-reference/flags":{"id":"command-reference/flags","title":"Common Flags","description":"Available Flags","sidebar":"tutorialSidebar"},"command-reference/json-output":{"id":"command-reference/json-output","title":"JSON Output","description":"The odo commands that output some content generally accept a -o json flag to output this content in a JSON format, suitable for other programs to parse this output more easily.","sidebar":"tutorialSidebar"},"command-reference/link":{"id":"command-reference/link","title":"odo link","description":"odo link command helps link an odo component to an Operator backed service or another odo component. It does this by using Service Binding Operator. At the time of writing this, odo makes use of the Service Binding library and not the Operator itself to achieve the desired functionality.","sidebar":"tutorialSidebar"},"command-reference/registry":{"id":"command-reference/registry","title":"odo registry","description":"odo uses the portable devfile format to describe the components. odo can connect to various devfile registries to download devfiles for different languages and frameworks.","sidebar":"tutorialSidebar"},"command-reference/service":{"id":"command-reference/service","title":"odo service","description":"odo can deploy services with the help of operators.","sidebar":"tutorialSidebar"},"command-reference/storage":{"id":"command-reference/storage","title":"odo storage","description":"odo lets users manage storage volumes attached to the components. A storage volume can be either an ephemeral volume using an emptyDir Kubernetes volume, or a PVC, which is a way for users to \\"claim\\" a persistent volume (such as a GCE PersistentDisk or an iSCSI volume) without understanding the details of the particular cloud environment. The persistent storage volume can be used to persist data across restarts and rebuilds of the component.","sidebar":"tutorialSidebar"},"contribution":{"id":"contribution","title":"Contributing to odo","description":"* Contributing to code","sidebar":"tutorialSidebar"},"getting-started/basics":{"id":"getting-started/basics","title":"Basics","description":"odo abstracts Kubernetes concepts into a developer friendly terminology; in this document, we will take a look at the following terminologies:","sidebar":"tutorialSidebar"},"getting-started/cluster-setup/kubernetes":{"id":"getting-started/cluster-setup/kubernetes","title":"Kubernetes","description":"Introduction","sidebar":"tutorialSidebar"},"getting-started/cluster-setup/openshift":{"id":"getting-started/cluster-setup/openshift","title":"OpenShift","description":"Introduction","sidebar":"tutorialSidebar"},"getting-started/configure":{"id":"getting-started/configure","title":"Configuration","description":"The global settings for odo can be found in preference.yaml file; which is located by default in the .odo directory of the user\'s HOME directory.","sidebar":"tutorialSidebar"},"getting-started/features":{"id":"getting-started/features","title":"Features","description":"By using odo, application developers can develop, test, debug, and deploy microservices based applications on Kubernetes without having a deep understanding of the platform.","sidebar":"tutorialSidebar"},"getting-started/installation":{"id":"getting-started/installation","title":"Installation","description":"odo can be used as either a CLI tool or an IDE plugin on Mac, Windows or Linux.","sidebar":"tutorialSidebar"},"getting-started/quickstart":{"id":"getting-started/quickstart","title":"Quickstart Guide","description":"In this guide, we will be using odo to create a to-do list application, with the following:","sidebar":"tutorialSidebar"},"introduction":{"id":"introduction","title":"Introduction","description":"What is odo?","sidebar":"tutorialSidebar"},"tutorials/create-k8s-resources":{"id":"tutorials/create-k8s-resources","title":"Creating Kubernetes resources","description":"While odo is mainly focused on application developers who would like to care less about Kubernetes and more about getting their application running on top of it, it also tries to make things simple for application architects or devfile stack authors who are comfortable with Kubernetes. One such feature of odo that we will discuss in this guide is creation of Kubernetes resources like Pods, Deployments, Services (Kubernetes Services, not the Operator backed ones) and such using odo. Using this, if an advanced user would like to create some Kubernetes resources, they could edit the devfile.yaml and add it there. An odo push after the edit would create the resource on the cluster. A resource thus created would co-exist with an odo component.","sidebar":"tutorialSidebar"},"tutorials/debugging-using-devfile":{"id":"tutorials/debugging-using-devfile","title":"Debugging using devfile","description":"Debugging a component","sidebar":"tutorialSidebar"},"tutorials/deploying-a-devfile-using-odo-on-IBM-Z-and-Power":{"id":"tutorials/deploying-a-devfile-using-odo-on-IBM-Z-and-Power","title":"Using odo on IBM-Z and Power","description":"[//]: # (Add prerequisite section)","sidebar":"tutorialSidebar"},"tutorials/deploying-java-app-with-database":{"id":"tutorials/deploying-java-app-with-database","title":"Deploying a Java Open Liberty application with PostgreSQL","description":"This tutorial illustrates deploying a Java Open Liberty application with odo and linking it to an in-cluster PostgreSQL service in a minikube environment.","sidebar":"tutorialSidebar"},"tutorials/using-devfile-lifecycle-events":{"id":"tutorials/using-devfile-lifecycle-events","title":"Using devfile lifecycle events","description":"odo uses devfile to build and deploy components. You can also use devfile events with a component during its lifecycle. The four different types of devfile events are preStart, postStart, preStop and postStop","sidebar":"tutorialSidebar"},"tutorials/using-devfile-odo.dev.push.path-attribute":{"id":"tutorials/using-devfile-odo.dev.push.path-attribute","title":"Using the odo.dev.push.path related attribute","description":"odo uses the odo.dev.push.path related attribute from the devfile\'s run commands to push only the specified files and folders to the component.","sidebar":"tutorialSidebar"},"using-odo/create-component":{"id":"using-odo/create-component","title":"Create Component","description":"Component is the most basic unit of operation for odo. And the way to create one is using odo create (short for odo component create) command.","sidebar":"tutorialSidebar"},"using-odo/create-url":{"id":"using-odo/create-url","title":"Create URLs using odo","description":"In the previous section we created two components \u2014 a Spring Boot application (backend) listening on port 8080 and a Nodejs application (frontend) listening on port 3000 \u2014 and pushed them to the Kubernetes cluster. These are also the respective default ports (8080 for Spring Boot and 3000 for Nodejs) for Spring Boot and Nodejs component types. In this guide, we will create URLs to access these components from the host system.","sidebar":"tutorialSidebar"}}}')}}]);